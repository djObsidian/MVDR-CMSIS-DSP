
H7_MVDR_Benchmark.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d58  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08003024  08003024  00004024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003074  08003074  00004074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800307c  0800307c  0000407c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08003080  08003080  00004080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00008014  24000000  08003084  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000078  24008018  0800b098  0000d018  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24008090  0800b098  0000d090  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d014  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000a21e  00000000  00000000  0000d042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001c6e  00000000  00000000  00017260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000688  00000000  00000000  00018ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000450  00000000  00000000  00019558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003019d  00000000  00000000  000199a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00008145  00000000  00000000  00049b45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001376b4  00000000  00000000  00051c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  0018933e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000186c  00000000  00000000  001893f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000053  00000000  00000000  0018ac64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    0000162c  00000000  00000000  0018acb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000050  00000000  00000000  0018c2e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24008018 	.word	0x24008018
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800300c 	.word	0x0800300c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	2400801c 	.word	0x2400801c
 8000308:	0800300c 	.word	0x0800300c

0800030c <__aeabi_drsub>:
 800030c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000310:	e002      	b.n	8000318 <__adddf3>
 8000312:	bf00      	nop

08000314 <__aeabi_dsub>:
 8000314:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000318 <__adddf3>:
 8000318:	b530      	push	{r4, r5, lr}
 800031a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800031e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000322:	ea94 0f05 	teq	r4, r5
 8000326:	bf08      	it	eq
 8000328:	ea90 0f02 	teqeq	r0, r2
 800032c:	bf1f      	itttt	ne
 800032e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000332:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000336:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800033e:	f000 80e2 	beq.w	8000506 <__adddf3+0x1ee>
 8000342:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000346:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034a:	bfb8      	it	lt
 800034c:	426d      	neglt	r5, r5
 800034e:	dd0c      	ble.n	800036a <__adddf3+0x52>
 8000350:	442c      	add	r4, r5
 8000352:	ea80 0202 	eor.w	r2, r0, r2
 8000356:	ea81 0303 	eor.w	r3, r1, r3
 800035a:	ea82 0000 	eor.w	r0, r2, r0
 800035e:	ea83 0101 	eor.w	r1, r3, r1
 8000362:	ea80 0202 	eor.w	r2, r0, r2
 8000366:	ea81 0303 	eor.w	r3, r1, r3
 800036a:	2d36      	cmp	r5, #54	@ 0x36
 800036c:	bf88      	it	hi
 800036e:	bd30      	pophi	{r4, r5, pc}
 8000370:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000374:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000378:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800037c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000380:	d002      	beq.n	8000388 <__adddf3+0x70>
 8000382:	4240      	negs	r0, r0
 8000384:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000388:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800038c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000390:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000394:	d002      	beq.n	800039c <__adddf3+0x84>
 8000396:	4252      	negs	r2, r2
 8000398:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039c:	ea94 0f05 	teq	r4, r5
 80003a0:	f000 80a7 	beq.w	80004f2 <__adddf3+0x1da>
 80003a4:	f1a4 0401 	sub.w	r4, r4, #1
 80003a8:	f1d5 0e20 	rsbs	lr, r5, #32
 80003ac:	db0d      	blt.n	80003ca <__adddf3+0xb2>
 80003ae:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b2:	fa22 f205 	lsr.w	r2, r2, r5
 80003b6:	1880      	adds	r0, r0, r2
 80003b8:	f141 0100 	adc.w	r1, r1, #0
 80003bc:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c0:	1880      	adds	r0, r0, r2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	4159      	adcs	r1, r3
 80003c8:	e00e      	b.n	80003e8 <__adddf3+0xd0>
 80003ca:	f1a5 0520 	sub.w	r5, r5, #32
 80003ce:	f10e 0e20 	add.w	lr, lr, #32
 80003d2:	2a01      	cmp	r2, #1
 80003d4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003d8:	bf28      	it	cs
 80003da:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003de:	fa43 f305 	asr.w	r3, r3, r5
 80003e2:	18c0      	adds	r0, r0, r3
 80003e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ec:	d507      	bpl.n	80003fe <__adddf3+0xe6>
 80003ee:	f04f 0e00 	mov.w	lr, #0
 80003f2:	f1dc 0c00 	rsbs	ip, ip, #0
 80003f6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fa:	eb6e 0101 	sbc.w	r1, lr, r1
 80003fe:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000402:	d31b      	bcc.n	800043c <__adddf3+0x124>
 8000404:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000408:	d30c      	bcc.n	8000424 <__adddf3+0x10c>
 800040a:	0849      	lsrs	r1, r1, #1
 800040c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000410:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000414:	f104 0401 	add.w	r4, r4, #1
 8000418:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800041c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000420:	f080 809a 	bcs.w	8000558 <__adddf3+0x240>
 8000424:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000428:	bf08      	it	eq
 800042a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800042e:	f150 0000 	adcs.w	r0, r0, #0
 8000432:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000436:	ea41 0105 	orr.w	r1, r1, r5
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000440:	4140      	adcs	r0, r0
 8000442:	eb41 0101 	adc.w	r1, r1, r1
 8000446:	3c01      	subs	r4, #1
 8000448:	bf28      	it	cs
 800044a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800044e:	d2e9      	bcs.n	8000424 <__adddf3+0x10c>
 8000450:	f091 0f00 	teq	r1, #0
 8000454:	bf04      	itt	eq
 8000456:	4601      	moveq	r1, r0
 8000458:	2000      	moveq	r0, #0
 800045a:	fab1 f381 	clz	r3, r1
 800045e:	bf08      	it	eq
 8000460:	3320      	addeq	r3, #32
 8000462:	f1a3 030b 	sub.w	r3, r3, #11
 8000466:	f1b3 0220 	subs.w	r2, r3, #32
 800046a:	da0c      	bge.n	8000486 <__adddf3+0x16e>
 800046c:	320c      	adds	r2, #12
 800046e:	dd08      	ble.n	8000482 <__adddf3+0x16a>
 8000470:	f102 0c14 	add.w	ip, r2, #20
 8000474:	f1c2 020c 	rsb	r2, r2, #12
 8000478:	fa01 f00c 	lsl.w	r0, r1, ip
 800047c:	fa21 f102 	lsr.w	r1, r1, r2
 8000480:	e00c      	b.n	800049c <__adddf3+0x184>
 8000482:	f102 0214 	add.w	r2, r2, #20
 8000486:	bfd8      	it	le
 8000488:	f1c2 0c20 	rsble	ip, r2, #32
 800048c:	fa01 f102 	lsl.w	r1, r1, r2
 8000490:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000494:	bfdc      	itt	le
 8000496:	ea41 010c 	orrle.w	r1, r1, ip
 800049a:	4090      	lslle	r0, r2
 800049c:	1ae4      	subs	r4, r4, r3
 800049e:	bfa2      	ittt	ge
 80004a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a4:	4329      	orrge	r1, r5
 80004a6:	bd30      	popge	{r4, r5, pc}
 80004a8:	ea6f 0404 	mvn.w	r4, r4
 80004ac:	3c1f      	subs	r4, #31
 80004ae:	da1c      	bge.n	80004ea <__adddf3+0x1d2>
 80004b0:	340c      	adds	r4, #12
 80004b2:	dc0e      	bgt.n	80004d2 <__adddf3+0x1ba>
 80004b4:	f104 0414 	add.w	r4, r4, #20
 80004b8:	f1c4 0220 	rsb	r2, r4, #32
 80004bc:	fa20 f004 	lsr.w	r0, r0, r4
 80004c0:	fa01 f302 	lsl.w	r3, r1, r2
 80004c4:	ea40 0003 	orr.w	r0, r0, r3
 80004c8:	fa21 f304 	lsr.w	r3, r1, r4
 80004cc:	ea45 0103 	orr.w	r1, r5, r3
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	f1c4 040c 	rsb	r4, r4, #12
 80004d6:	f1c4 0220 	rsb	r2, r4, #32
 80004da:	fa20 f002 	lsr.w	r0, r0, r2
 80004de:	fa01 f304 	lsl.w	r3, r1, r4
 80004e2:	ea40 0003 	orr.w	r0, r0, r3
 80004e6:	4629      	mov	r1, r5
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	fa21 f004 	lsr.w	r0, r1, r4
 80004ee:	4629      	mov	r1, r5
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	f094 0f00 	teq	r4, #0
 80004f6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004fa:	bf06      	itte	eq
 80004fc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000500:	3401      	addeq	r4, #1
 8000502:	3d01      	subne	r5, #1
 8000504:	e74e      	b.n	80003a4 <__adddf3+0x8c>
 8000506:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050a:	bf18      	it	ne
 800050c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000510:	d029      	beq.n	8000566 <__adddf3+0x24e>
 8000512:	ea94 0f05 	teq	r4, r5
 8000516:	bf08      	it	eq
 8000518:	ea90 0f02 	teqeq	r0, r2
 800051c:	d005      	beq.n	800052a <__adddf3+0x212>
 800051e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000522:	bf04      	itt	eq
 8000524:	4619      	moveq	r1, r3
 8000526:	4610      	moveq	r0, r2
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea91 0f03 	teq	r1, r3
 800052e:	bf1e      	ittt	ne
 8000530:	2100      	movne	r1, #0
 8000532:	2000      	movne	r0, #0
 8000534:	bd30      	popne	{r4, r5, pc}
 8000536:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053a:	d105      	bne.n	8000548 <__adddf3+0x230>
 800053c:	0040      	lsls	r0, r0, #1
 800053e:	4149      	adcs	r1, r1
 8000540:	bf28      	it	cs
 8000542:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000546:	bd30      	pop	{r4, r5, pc}
 8000548:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800054c:	bf3c      	itt	cc
 800054e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000552:	bd30      	popcc	{r4, r5, pc}
 8000554:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000558:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800055c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000560:	f04f 0000 	mov.w	r0, #0
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056a:	bf1a      	itte	ne
 800056c:	4619      	movne	r1, r3
 800056e:	4610      	movne	r0, r2
 8000570:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000574:	bf1c      	itt	ne
 8000576:	460b      	movne	r3, r1
 8000578:	4602      	movne	r2, r0
 800057a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800057e:	bf06      	itte	eq
 8000580:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000584:	ea91 0f03 	teqeq	r1, r3
 8000588:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	bf00      	nop

08000590 <__aeabi_ui2d>:
 8000590:	f090 0f00 	teq	r0, #0
 8000594:	bf04      	itt	eq
 8000596:	2100      	moveq	r1, #0
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a4:	f04f 0500 	mov.w	r5, #0
 80005a8:	f04f 0100 	mov.w	r1, #0
 80005ac:	e750      	b.n	8000450 <__adddf3+0x138>
 80005ae:	bf00      	nop

080005b0 <__aeabi_i2d>:
 80005b0:	f090 0f00 	teq	r0, #0
 80005b4:	bf04      	itt	eq
 80005b6:	2100      	moveq	r1, #0
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005c8:	bf48      	it	mi
 80005ca:	4240      	negmi	r0, r0
 80005cc:	f04f 0100 	mov.w	r1, #0
 80005d0:	e73e      	b.n	8000450 <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_f2d>:
 80005d4:	0042      	lsls	r2, r0, #1
 80005d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005da:	ea4f 0131 	mov.w	r1, r1, rrx
 80005de:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e2:	bf1f      	itttt	ne
 80005e4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005e8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005ec:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005f0:	4770      	bxne	lr
 80005f2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005f6:	bf08      	it	eq
 80005f8:	4770      	bxeq	lr
 80005fa:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005fe:	bf04      	itt	eq
 8000600:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000604:	4770      	bxeq	lr
 8000606:	b530      	push	{r4, r5, lr}
 8000608:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800060c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	e71c      	b.n	8000450 <__adddf3+0x138>
 8000616:	bf00      	nop

08000618 <__aeabi_ul2d>:
 8000618:	ea50 0201 	orrs.w	r2, r0, r1
 800061c:	bf08      	it	eq
 800061e:	4770      	bxeq	lr
 8000620:	b530      	push	{r4, r5, lr}
 8000622:	f04f 0500 	mov.w	r5, #0
 8000626:	e00a      	b.n	800063e <__aeabi_l2d+0x16>

08000628 <__aeabi_l2d>:
 8000628:	ea50 0201 	orrs.w	r2, r0, r1
 800062c:	bf08      	it	eq
 800062e:	4770      	bxeq	lr
 8000630:	b530      	push	{r4, r5, lr}
 8000632:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000636:	d502      	bpl.n	800063e <__aeabi_l2d+0x16>
 8000638:	4240      	negs	r0, r0
 800063a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800063e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000642:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000646:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064a:	f43f aed8 	beq.w	80003fe <__adddf3+0xe6>
 800064e:	f04f 0203 	mov.w	r2, #3
 8000652:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000656:	bf18      	it	ne
 8000658:	3203      	addne	r2, #3
 800065a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065e:	bf18      	it	ne
 8000660:	3203      	addne	r2, #3
 8000662:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000666:	f1c2 0320 	rsb	r3, r2, #32
 800066a:	fa00 fc03 	lsl.w	ip, r0, r3
 800066e:	fa20 f002 	lsr.w	r0, r0, r2
 8000672:	fa01 fe03 	lsl.w	lr, r1, r3
 8000676:	ea40 000e 	orr.w	r0, r0, lr
 800067a:	fa21 f102 	lsr.w	r1, r1, r2
 800067e:	4414      	add	r4, r2
 8000680:	e6bd      	b.n	80003fe <__adddf3+0xe6>
 8000682:	bf00      	nop

08000684 <__aeabi_uldivmod>:
 8000684:	b953      	cbnz	r3, 800069c <__aeabi_uldivmod+0x18>
 8000686:	b94a      	cbnz	r2, 800069c <__aeabi_uldivmod+0x18>
 8000688:	2900      	cmp	r1, #0
 800068a:	bf08      	it	eq
 800068c:	2800      	cmpeq	r0, #0
 800068e:	bf1c      	itt	ne
 8000690:	f04f 31ff 	movne.w	r1, #4294967295
 8000694:	f04f 30ff 	movne.w	r0, #4294967295
 8000698:	f000 b96a 	b.w	8000970 <__aeabi_idiv0>
 800069c:	f1ad 0c08 	sub.w	ip, sp, #8
 80006a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006a4:	f000 f806 	bl	80006b4 <__udivmoddi4>
 80006a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006b0:	b004      	add	sp, #16
 80006b2:	4770      	bx	lr

080006b4 <__udivmoddi4>:
 80006b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006b8:	9d08      	ldr	r5, [sp, #32]
 80006ba:	460c      	mov	r4, r1
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d14e      	bne.n	800075e <__udivmoddi4+0xaa>
 80006c0:	4694      	mov	ip, r2
 80006c2:	458c      	cmp	ip, r1
 80006c4:	4686      	mov	lr, r0
 80006c6:	fab2 f282 	clz	r2, r2
 80006ca:	d962      	bls.n	8000792 <__udivmoddi4+0xde>
 80006cc:	b14a      	cbz	r2, 80006e2 <__udivmoddi4+0x2e>
 80006ce:	f1c2 0320 	rsb	r3, r2, #32
 80006d2:	4091      	lsls	r1, r2
 80006d4:	fa20 f303 	lsr.w	r3, r0, r3
 80006d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80006dc:	4319      	orrs	r1, r3
 80006de:	fa00 fe02 	lsl.w	lr, r0, r2
 80006e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006e6:	fa1f f68c 	uxth.w	r6, ip
 80006ea:	fbb1 f4f7 	udiv	r4, r1, r7
 80006ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006f2:	fb07 1114 	mls	r1, r7, r4, r1
 80006f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006fa:	fb04 f106 	mul.w	r1, r4, r6
 80006fe:	4299      	cmp	r1, r3
 8000700:	d90a      	bls.n	8000718 <__udivmoddi4+0x64>
 8000702:	eb1c 0303 	adds.w	r3, ip, r3
 8000706:	f104 30ff 	add.w	r0, r4, #4294967295
 800070a:	f080 8112 	bcs.w	8000932 <__udivmoddi4+0x27e>
 800070e:	4299      	cmp	r1, r3
 8000710:	f240 810f 	bls.w	8000932 <__udivmoddi4+0x27e>
 8000714:	3c02      	subs	r4, #2
 8000716:	4463      	add	r3, ip
 8000718:	1a59      	subs	r1, r3, r1
 800071a:	fa1f f38e 	uxth.w	r3, lr
 800071e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000722:	fb07 1110 	mls	r1, r7, r0, r1
 8000726:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800072a:	fb00 f606 	mul.w	r6, r0, r6
 800072e:	429e      	cmp	r6, r3
 8000730:	d90a      	bls.n	8000748 <__udivmoddi4+0x94>
 8000732:	eb1c 0303 	adds.w	r3, ip, r3
 8000736:	f100 31ff 	add.w	r1, r0, #4294967295
 800073a:	f080 80fc 	bcs.w	8000936 <__udivmoddi4+0x282>
 800073e:	429e      	cmp	r6, r3
 8000740:	f240 80f9 	bls.w	8000936 <__udivmoddi4+0x282>
 8000744:	4463      	add	r3, ip
 8000746:	3802      	subs	r0, #2
 8000748:	1b9b      	subs	r3, r3, r6
 800074a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800074e:	2100      	movs	r1, #0
 8000750:	b11d      	cbz	r5, 800075a <__udivmoddi4+0xa6>
 8000752:	40d3      	lsrs	r3, r2
 8000754:	2200      	movs	r2, #0
 8000756:	e9c5 3200 	strd	r3, r2, [r5]
 800075a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800075e:	428b      	cmp	r3, r1
 8000760:	d905      	bls.n	800076e <__udivmoddi4+0xba>
 8000762:	b10d      	cbz	r5, 8000768 <__udivmoddi4+0xb4>
 8000764:	e9c5 0100 	strd	r0, r1, [r5]
 8000768:	2100      	movs	r1, #0
 800076a:	4608      	mov	r0, r1
 800076c:	e7f5      	b.n	800075a <__udivmoddi4+0xa6>
 800076e:	fab3 f183 	clz	r1, r3
 8000772:	2900      	cmp	r1, #0
 8000774:	d146      	bne.n	8000804 <__udivmoddi4+0x150>
 8000776:	42a3      	cmp	r3, r4
 8000778:	d302      	bcc.n	8000780 <__udivmoddi4+0xcc>
 800077a:	4290      	cmp	r0, r2
 800077c:	f0c0 80f0 	bcc.w	8000960 <__udivmoddi4+0x2ac>
 8000780:	1a86      	subs	r6, r0, r2
 8000782:	eb64 0303 	sbc.w	r3, r4, r3
 8000786:	2001      	movs	r0, #1
 8000788:	2d00      	cmp	r5, #0
 800078a:	d0e6      	beq.n	800075a <__udivmoddi4+0xa6>
 800078c:	e9c5 6300 	strd	r6, r3, [r5]
 8000790:	e7e3      	b.n	800075a <__udivmoddi4+0xa6>
 8000792:	2a00      	cmp	r2, #0
 8000794:	f040 8090 	bne.w	80008b8 <__udivmoddi4+0x204>
 8000798:	eba1 040c 	sub.w	r4, r1, ip
 800079c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007a0:	fa1f f78c 	uxth.w	r7, ip
 80007a4:	2101      	movs	r1, #1
 80007a6:	fbb4 f6f8 	udiv	r6, r4, r8
 80007aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007ae:	fb08 4416 	mls	r4, r8, r6, r4
 80007b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007b6:	fb07 f006 	mul.w	r0, r7, r6
 80007ba:	4298      	cmp	r0, r3
 80007bc:	d908      	bls.n	80007d0 <__udivmoddi4+0x11c>
 80007be:	eb1c 0303 	adds.w	r3, ip, r3
 80007c2:	f106 34ff 	add.w	r4, r6, #4294967295
 80007c6:	d202      	bcs.n	80007ce <__udivmoddi4+0x11a>
 80007c8:	4298      	cmp	r0, r3
 80007ca:	f200 80cd 	bhi.w	8000968 <__udivmoddi4+0x2b4>
 80007ce:	4626      	mov	r6, r4
 80007d0:	1a1c      	subs	r4, r3, r0
 80007d2:	fa1f f38e 	uxth.w	r3, lr
 80007d6:	fbb4 f0f8 	udiv	r0, r4, r8
 80007da:	fb08 4410 	mls	r4, r8, r0, r4
 80007de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007e2:	fb00 f707 	mul.w	r7, r0, r7
 80007e6:	429f      	cmp	r7, r3
 80007e8:	d908      	bls.n	80007fc <__udivmoddi4+0x148>
 80007ea:	eb1c 0303 	adds.w	r3, ip, r3
 80007ee:	f100 34ff 	add.w	r4, r0, #4294967295
 80007f2:	d202      	bcs.n	80007fa <__udivmoddi4+0x146>
 80007f4:	429f      	cmp	r7, r3
 80007f6:	f200 80b0 	bhi.w	800095a <__udivmoddi4+0x2a6>
 80007fa:	4620      	mov	r0, r4
 80007fc:	1bdb      	subs	r3, r3, r7
 80007fe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000802:	e7a5      	b.n	8000750 <__udivmoddi4+0x9c>
 8000804:	f1c1 0620 	rsb	r6, r1, #32
 8000808:	408b      	lsls	r3, r1
 800080a:	fa22 f706 	lsr.w	r7, r2, r6
 800080e:	431f      	orrs	r7, r3
 8000810:	fa20 fc06 	lsr.w	ip, r0, r6
 8000814:	fa04 f301 	lsl.w	r3, r4, r1
 8000818:	ea43 030c 	orr.w	r3, r3, ip
 800081c:	40f4      	lsrs	r4, r6
 800081e:	fa00 f801 	lsl.w	r8, r0, r1
 8000822:	0c38      	lsrs	r0, r7, #16
 8000824:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000828:	fbb4 fef0 	udiv	lr, r4, r0
 800082c:	fa1f fc87 	uxth.w	ip, r7
 8000830:	fb00 441e 	mls	r4, r0, lr, r4
 8000834:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000838:	fb0e f90c 	mul.w	r9, lr, ip
 800083c:	45a1      	cmp	r9, r4
 800083e:	fa02 f201 	lsl.w	r2, r2, r1
 8000842:	d90a      	bls.n	800085a <__udivmoddi4+0x1a6>
 8000844:	193c      	adds	r4, r7, r4
 8000846:	f10e 3aff 	add.w	sl, lr, #4294967295
 800084a:	f080 8084 	bcs.w	8000956 <__udivmoddi4+0x2a2>
 800084e:	45a1      	cmp	r9, r4
 8000850:	f240 8081 	bls.w	8000956 <__udivmoddi4+0x2a2>
 8000854:	f1ae 0e02 	sub.w	lr, lr, #2
 8000858:	443c      	add	r4, r7
 800085a:	eba4 0409 	sub.w	r4, r4, r9
 800085e:	fa1f f983 	uxth.w	r9, r3
 8000862:	fbb4 f3f0 	udiv	r3, r4, r0
 8000866:	fb00 4413 	mls	r4, r0, r3, r4
 800086a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800086e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000872:	45a4      	cmp	ip, r4
 8000874:	d907      	bls.n	8000886 <__udivmoddi4+0x1d2>
 8000876:	193c      	adds	r4, r7, r4
 8000878:	f103 30ff 	add.w	r0, r3, #4294967295
 800087c:	d267      	bcs.n	800094e <__udivmoddi4+0x29a>
 800087e:	45a4      	cmp	ip, r4
 8000880:	d965      	bls.n	800094e <__udivmoddi4+0x29a>
 8000882:	3b02      	subs	r3, #2
 8000884:	443c      	add	r4, r7
 8000886:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800088a:	fba0 9302 	umull	r9, r3, r0, r2
 800088e:	eba4 040c 	sub.w	r4, r4, ip
 8000892:	429c      	cmp	r4, r3
 8000894:	46ce      	mov	lr, r9
 8000896:	469c      	mov	ip, r3
 8000898:	d351      	bcc.n	800093e <__udivmoddi4+0x28a>
 800089a:	d04e      	beq.n	800093a <__udivmoddi4+0x286>
 800089c:	b155      	cbz	r5, 80008b4 <__udivmoddi4+0x200>
 800089e:	ebb8 030e 	subs.w	r3, r8, lr
 80008a2:	eb64 040c 	sbc.w	r4, r4, ip
 80008a6:	fa04 f606 	lsl.w	r6, r4, r6
 80008aa:	40cb      	lsrs	r3, r1
 80008ac:	431e      	orrs	r6, r3
 80008ae:	40cc      	lsrs	r4, r1
 80008b0:	e9c5 6400 	strd	r6, r4, [r5]
 80008b4:	2100      	movs	r1, #0
 80008b6:	e750      	b.n	800075a <__udivmoddi4+0xa6>
 80008b8:	f1c2 0320 	rsb	r3, r2, #32
 80008bc:	fa20 f103 	lsr.w	r1, r0, r3
 80008c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008c4:	fa24 f303 	lsr.w	r3, r4, r3
 80008c8:	4094      	lsls	r4, r2
 80008ca:	430c      	orrs	r4, r1
 80008cc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008d0:	fa00 fe02 	lsl.w	lr, r0, r2
 80008d4:	fa1f f78c 	uxth.w	r7, ip
 80008d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008dc:	fb08 3110 	mls	r1, r8, r0, r3
 80008e0:	0c23      	lsrs	r3, r4, #16
 80008e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008e6:	fb00 f107 	mul.w	r1, r0, r7
 80008ea:	4299      	cmp	r1, r3
 80008ec:	d908      	bls.n	8000900 <__udivmoddi4+0x24c>
 80008ee:	eb1c 0303 	adds.w	r3, ip, r3
 80008f2:	f100 36ff 	add.w	r6, r0, #4294967295
 80008f6:	d22c      	bcs.n	8000952 <__udivmoddi4+0x29e>
 80008f8:	4299      	cmp	r1, r3
 80008fa:	d92a      	bls.n	8000952 <__udivmoddi4+0x29e>
 80008fc:	3802      	subs	r0, #2
 80008fe:	4463      	add	r3, ip
 8000900:	1a5b      	subs	r3, r3, r1
 8000902:	b2a4      	uxth	r4, r4
 8000904:	fbb3 f1f8 	udiv	r1, r3, r8
 8000908:	fb08 3311 	mls	r3, r8, r1, r3
 800090c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000910:	fb01 f307 	mul.w	r3, r1, r7
 8000914:	42a3      	cmp	r3, r4
 8000916:	d908      	bls.n	800092a <__udivmoddi4+0x276>
 8000918:	eb1c 0404 	adds.w	r4, ip, r4
 800091c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000920:	d213      	bcs.n	800094a <__udivmoddi4+0x296>
 8000922:	42a3      	cmp	r3, r4
 8000924:	d911      	bls.n	800094a <__udivmoddi4+0x296>
 8000926:	3902      	subs	r1, #2
 8000928:	4464      	add	r4, ip
 800092a:	1ae4      	subs	r4, r4, r3
 800092c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000930:	e739      	b.n	80007a6 <__udivmoddi4+0xf2>
 8000932:	4604      	mov	r4, r0
 8000934:	e6f0      	b.n	8000718 <__udivmoddi4+0x64>
 8000936:	4608      	mov	r0, r1
 8000938:	e706      	b.n	8000748 <__udivmoddi4+0x94>
 800093a:	45c8      	cmp	r8, r9
 800093c:	d2ae      	bcs.n	800089c <__udivmoddi4+0x1e8>
 800093e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000942:	eb63 0c07 	sbc.w	ip, r3, r7
 8000946:	3801      	subs	r0, #1
 8000948:	e7a8      	b.n	800089c <__udivmoddi4+0x1e8>
 800094a:	4631      	mov	r1, r6
 800094c:	e7ed      	b.n	800092a <__udivmoddi4+0x276>
 800094e:	4603      	mov	r3, r0
 8000950:	e799      	b.n	8000886 <__udivmoddi4+0x1d2>
 8000952:	4630      	mov	r0, r6
 8000954:	e7d4      	b.n	8000900 <__udivmoddi4+0x24c>
 8000956:	46d6      	mov	lr, sl
 8000958:	e77f      	b.n	800085a <__udivmoddi4+0x1a6>
 800095a:	4463      	add	r3, ip
 800095c:	3802      	subs	r0, #2
 800095e:	e74d      	b.n	80007fc <__udivmoddi4+0x148>
 8000960:	4606      	mov	r6, r0
 8000962:	4623      	mov	r3, r4
 8000964:	4608      	mov	r0, r1
 8000966:	e70f      	b.n	8000788 <__udivmoddi4+0xd4>
 8000968:	3e02      	subs	r6, #2
 800096a:	4463      	add	r3, ip
 800096c:	e730      	b.n	80007d0 <__udivmoddi4+0x11c>
 800096e:	bf00      	nop

08000970 <__aeabi_idiv0>:
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <MVDR_f32>:
 */

#include "MVDR.h"

arm_status MVDR_f32(uint8_t antArrSize, uint16_t snapshotSize, float32_t *snapshotI, float32_t *snapshotQ, float32_t *weights, float32_t*mvdrWeights)
{
 8000974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000978:	b0db      	sub	sp, #364	@ 0x16c
 800097a:	af00      	add	r7, sp, #0
 800097c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000980:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000984:	4603      	mov	r3, r0
 8000986:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800098a:	460b      	mov	r3, r1
 800098c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8000990:	466b      	mov	r3, sp
 8000992:	461e      	mov	r6, r3
	//MVDR equation: w = R^(-1)*a/(aH*R^(-1)*a)
	//Where R = rrH
	//r = antArr x snapashotSize - матрица отсчетов с решётки
	//a = antArr x 1 - вектор весовых коэффициентов в интересующем направлении

	float32_t R_f32[antArrSize*antArrSize*4]; //R buffer
 8000994:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 8000998:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800099c:	fb02 f303 	mul.w	r3, r2, r3
 80009a0:	0099      	lsls	r1, r3, #2
 80009a2:	1e4b      	subs	r3, r1, #1
 80009a4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80009a8:	460a      	mov	r2, r1
 80009aa:	2300      	movs	r3, #0
 80009ac:	4614      	mov	r4, r2
 80009ae:	461d      	mov	r5, r3
 80009b0:	f04f 0200 	mov.w	r2, #0
 80009b4:	f04f 0300 	mov.w	r3, #0
 80009b8:	016b      	lsls	r3, r5, #5
 80009ba:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80009be:	0162      	lsls	r2, r4, #5
 80009c0:	460a      	mov	r2, r1
 80009c2:	2300      	movs	r3, #0
 80009c4:	4690      	mov	r8, r2
 80009c6:	4699      	mov	r9, r3
 80009c8:	f04f 0200 	mov.w	r2, #0
 80009cc:	f04f 0300 	mov.w	r3, #0
 80009d0:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80009d4:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80009d8:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80009dc:	460b      	mov	r3, r1
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	3307      	adds	r3, #7
 80009e2:	08db      	lsrs	r3, r3, #3
 80009e4:	00db      	lsls	r3, r3, #3
 80009e6:	ebad 0d03 	sub.w	sp, sp, r3
 80009ea:	466b      	mov	r3, sp
 80009ec:	3303      	adds	r3, #3
 80009ee:	089b      	lsrs	r3, r3, #2
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
	float32_t R_inv_f32[antArrSize*antArrSize*4]; //R buffer
 80009f6:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 80009fa:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80009fe:	fb02 f303 	mul.w	r3, r2, r3
 8000a02:	0099      	lsls	r1, r3, #2
 8000a04:	1e4b      	subs	r3, r1, #1
 8000a06:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8000a0a:	460a      	mov	r2, r1
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	4692      	mov	sl, r2
 8000a10:	469b      	mov	fp, r3
 8000a12:	f04f 0200 	mov.w	r2, #0
 8000a16:	f04f 0300 	mov.w	r3, #0
 8000a1a:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8000a1e:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8000a22:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8000a26:	460a      	mov	r2, r1
 8000a28:	2300      	movs	r3, #0
 8000a2a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8000a2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000a32:	f04f 0200 	mov.w	r2, #0
 8000a36:	f04f 0300 	mov.w	r3, #0
 8000a3a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000a3e:	4628      	mov	r0, r5
 8000a40:	0143      	lsls	r3, r0, #5
 8000a42:	4620      	mov	r0, r4
 8000a44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000a48:	4620      	mov	r0, r4
 8000a4a:	0142      	lsls	r2, r0, #5
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	3307      	adds	r3, #7
 8000a52:	08db      	lsrs	r3, r3, #3
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	ebad 0d03 	sub.w	sp, sp, r3
 8000a5a:	466b      	mov	r3, sp
 8000a5c:	3303      	adds	r3, #3
 8000a5e:	089b      	lsrs	r3, r3, #2
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140

	arm_matrix_instance_f32 R;
	arm_matrix_instance_f32 Rinv;

	arm_mat_init_f32(&R, antArrSize*2, antArrSize*2, (float32_t *)R_f32);
 8000a66:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	b299      	uxth	r1, r3
 8000a70:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	b29a      	uxth	r2, r3
 8000a7a:	f107 00f0 	add.w	r0, r7, #240	@ 0xf0
 8000a7e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8000a82:	f002 f9c9 	bl	8002e18 <arm_mat_init_f32>
	arm_mat_init_f32(&Rinv, antArrSize*2, antArrSize*2, (float32_t *)R_inv_f32);
 8000a86:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	b299      	uxth	r1, r3
 8000a90:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	f107 00e8 	add.w	r0, r7, #232	@ 0xe8
 8000a9e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8000aa2:	f002 f9b9 	bl	8002e18 <arm_mat_init_f32>

	arm_status status;

	{
 8000aa6:	466b      	mov	r3, sp
 8000aa8:	461c      	mov	r4, r3
		float32_t r_f32[antArrSize*snapshotSize*4]; //r buffer
 8000aaa:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 8000aae:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8000ab2:	fb02 f303 	mul.w	r3, r2, r3
 8000ab6:	0099      	lsls	r1, r3, #2
 8000ab8:	1e4b      	subs	r3, r1, #1
 8000aba:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8000abe:	460a      	mov	r2, r1
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	67ba      	str	r2, [r7, #120]	@ 0x78
 8000ac4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000ac6:	f04f 0200 	mov.w	r2, #0
 8000aca:	f04f 0300 	mov.w	r3, #0
 8000ace:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8000ad2:	4648      	mov	r0, r9
 8000ad4:	0143      	lsls	r3, r0, #5
 8000ad6:	4640      	mov	r0, r8
 8000ad8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000adc:	4640      	mov	r0, r8
 8000ade:	0142      	lsls	r2, r0, #5
 8000ae0:	460a      	mov	r2, r1
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	673a      	str	r2, [r7, #112]	@ 0x70
 8000ae6:	677b      	str	r3, [r7, #116]	@ 0x74
 8000ae8:	f04f 0200 	mov.w	r2, #0
 8000aec:	f04f 0300 	mov.w	r3, #0
 8000af0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8000af4:	4648      	mov	r0, r9
 8000af6:	0143      	lsls	r3, r0, #5
 8000af8:	4640      	mov	r0, r8
 8000afa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000afe:	4640      	mov	r0, r8
 8000b00:	0142      	lsls	r2, r0, #5
 8000b02:	460b      	mov	r3, r1
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	3307      	adds	r3, #7
 8000b08:	08db      	lsrs	r3, r3, #3
 8000b0a:	00db      	lsls	r3, r3, #3
 8000b0c:	ebad 0d03 	sub.w	sp, sp, r3
 8000b10:	466b      	mov	r3, sp
 8000b12:	3303      	adds	r3, #3
 8000b14:	089b      	lsrs	r3, r3, #2
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
		float32_t rH_f32[antArrSize*snapshotSize*4]; //rH buffer
 8000b1c:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 8000b20:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8000b24:	fb02 f303 	mul.w	r3, r2, r3
 8000b28:	0099      	lsls	r1, r3, #2
 8000b2a:	1e4b      	subs	r3, r1, #1
 8000b2c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8000b30:	460a      	mov	r2, r1
 8000b32:	2300      	movs	r3, #0
 8000b34:	66ba      	str	r2, [r7, #104]	@ 0x68
 8000b36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000b38:	f04f 0200 	mov.w	r2, #0
 8000b3c:	f04f 0300 	mov.w	r3, #0
 8000b40:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8000b44:	4648      	mov	r0, r9
 8000b46:	0143      	lsls	r3, r0, #5
 8000b48:	4640      	mov	r0, r8
 8000b4a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000b4e:	4640      	mov	r0, r8
 8000b50:	0142      	lsls	r2, r0, #5
 8000b52:	460a      	mov	r2, r1
 8000b54:	2300      	movs	r3, #0
 8000b56:	663a      	str	r2, [r7, #96]	@ 0x60
 8000b58:	667b      	str	r3, [r7, #100]	@ 0x64
 8000b5a:	f04f 0200 	mov.w	r2, #0
 8000b5e:	f04f 0300 	mov.w	r3, #0
 8000b62:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8000b66:	4648      	mov	r0, r9
 8000b68:	0143      	lsls	r3, r0, #5
 8000b6a:	4640      	mov	r0, r8
 8000b6c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000b70:	4640      	mov	r0, r8
 8000b72:	0142      	lsls	r2, r0, #5
 8000b74:	460b      	mov	r3, r1
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	3307      	adds	r3, #7
 8000b7a:	08db      	lsrs	r3, r3, #3
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	ebad 0d03 	sub.w	sp, sp, r3
 8000b82:	466b      	mov	r3, sp
 8000b84:	3303      	adds	r3, #3
 8000b86:	089b      	lsrs	r3, r3, #2
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
		//
		// A = [real(A) -imag(A)
		//      imag(A)  real(A)]
		// Размеры вектора i*j*4

		uint16_t numCols = snapshotSize;
 8000b8e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8000b92:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
		for (int i=0;i<antArrSize;i++)
 8000b96:	2300      	movs	r3, #0
 8000b98:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8000b9c:	e098      	b.n	8000cd0 <MVDR_f32+0x35c>
		{
			for (int j=0;j<snapshotSize;j++)
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8000ba4:	e088      	b.n	8000cb8 <MVDR_f32+0x344>
			{
				r_f32[i*numCols*2					+			  j] =  snapshotI[i*numCols+j]; //Верхняя левая матрица
 8000ba6:	f8b7 212e 	ldrh.w	r2, [r7, #302]	@ 0x12e
 8000baa:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000bae:	fb03 f202 	mul.w	r2, r3, r2
 8000bb2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000bb6:	4413      	add	r3, r2
 8000bb8:	009a      	lsls	r2, r3, #2
 8000bba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000bbe:	1899      	adds	r1, r3, r2
 8000bc0:	f8b7 212e 	ldrh.w	r2, [r7, #302]	@ 0x12e
 8000bc4:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000bc8:	fb02 f303 	mul.w	r3, r2, r3
 8000bcc:	005a      	lsls	r2, r3, #1
 8000bce:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000bd2:	4413      	add	r3, r2
 8000bd4:	6809      	ldr	r1, [r1, #0]
 8000bd6:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	4413      	add	r3, r2
 8000bde:	6019      	str	r1, [r3, #0]
				r_f32[(i+antArrSize)*numCols*2	+		   	  j] =  snapshotQ[i*numCols+j]; //Нижняя левая матрица
 8000be0:	f8b7 212e 	ldrh.w	r2, [r7, #302]	@ 0x12e
 8000be4:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000be8:	fb03 f202 	mul.w	r2, r3, r2
 8000bec:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000bf0:	4413      	add	r3, r2
 8000bf2:	009a      	lsls	r2, r3, #2
 8000bf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000bf8:	1899      	adds	r1, r3, r2
 8000bfa:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 8000bfe:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000c02:	441a      	add	r2, r3
 8000c04:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8000c08:	fb02 f303 	mul.w	r3, r2, r3
 8000c0c:	005a      	lsls	r2, r3, #1
 8000c0e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000c12:	4413      	add	r3, r2
 8000c14:	6809      	ldr	r1, [r1, #0]
 8000c16:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	4413      	add	r3, r2
 8000c1e:	6019      	str	r1, [r3, #0]
				r_f32[i*numCols*2					+	(j+numCols)] = -snapshotQ[i*numCols+j]; //Верхняя правая матрица
 8000c20:	f8b7 212e 	ldrh.w	r2, [r7, #302]	@ 0x12e
 8000c24:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000c28:	fb03 f202 	mul.w	r2, r3, r2
 8000c2c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000c30:	4413      	add	r3, r2
 8000c32:	009a      	lsls	r2, r3, #2
 8000c34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c38:	4413      	add	r3, r2
 8000c3a:	edd3 7a00 	vldr	s15, [r3]
 8000c3e:	f8b7 212e 	ldrh.w	r2, [r7, #302]	@ 0x12e
 8000c42:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000c46:	fb02 f303 	mul.w	r3, r2, r3
 8000c4a:	0059      	lsls	r1, r3, #1
 8000c4c:	f8b7 212e 	ldrh.w	r2, [r7, #302]	@ 0x12e
 8000c50:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000c54:	4413      	add	r3, r2
 8000c56:	440b      	add	r3, r1
 8000c58:	eef1 7a67 	vneg.f32	s15, s15
 8000c5c:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	4413      	add	r3, r2
 8000c64:	edc3 7a00 	vstr	s15, [r3]
				r_f32[(i+antArrSize)*numCols*2	+	(j+numCols)] =  snapshotI[i*numCols+j]; //Нижняя правая матрица
 8000c68:	f8b7 212e 	ldrh.w	r2, [r7, #302]	@ 0x12e
 8000c6c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000c70:	fb03 f202 	mul.w	r2, r3, r2
 8000c74:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000c78:	4413      	add	r3, r2
 8000c7a:	009a      	lsls	r2, r3, #2
 8000c7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000c80:	1898      	adds	r0, r3, r2
 8000c82:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 8000c86:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000c8a:	441a      	add	r2, r3
 8000c8c:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8000c90:	fb02 f303 	mul.w	r3, r2, r3
 8000c94:	0059      	lsls	r1, r3, #1
 8000c96:	f8b7 212e 	ldrh.w	r2, [r7, #302]	@ 0x12e
 8000c9a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000c9e:	4413      	add	r3, r2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	6801      	ldr	r1, [r0, #0]
 8000ca4:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	4413      	add	r3, r2
 8000cac:	6019      	str	r1, [r3, #0]
			for (int j=0;j<snapshotSize;j++)
 8000cae:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8000cb8:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 8000cbc:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	f6ff af70 	blt.w	8000ba6 <MVDR_f32+0x232>
		for (int i=0;i<antArrSize;i++)
 8000cc6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000cca:	3301      	adds	r3, #1
 8000ccc:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8000cd0:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 8000cd4:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	f6ff af60 	blt.w	8000b9e <MVDR_f32+0x22a>


		arm_matrix_instance_f32 r;
		arm_matrix_instance_f32 rH;

		arm_mat_init_f32(&r, antArrSize*2, snapshotSize*2, (float32_t *)r_f32);
 8000cde:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	b299      	uxth	r1, r3
 8000ce8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 8000cf4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000cf8:	f002 f88e 	bl	8002e18 <arm_mat_init_f32>
		arm_mat_init_f32(&rH, snapshotSize*2, antArrSize*2, (float32_t *)rH_f32);
 8000cfc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	b299      	uxth	r1, r3
 8000d04:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8000d12:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000d16:	f002 f87f 	bl	8002e18 <arm_mat_init_f32>



		status = arm_mat_trans_f32(&r, &rH);
 8000d1a:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8000d1e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000d22:	4611      	mov	r1, r2
 8000d24:	4618      	mov	r0, r3
 8000d26:	f001 fe77 	bl	8002a18 <arm_mat_trans_f32>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	f887 312d 	strb.w	r3, [r7, #301]	@ 0x12d
		status = arm_mat_mult_f32(&r, &rH, &R);
 8000d30:	f107 02f0 	add.w	r2, r7, #240	@ 0xf0
 8000d34:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8000d38:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f001 fec9 	bl	8002ad4 <arm_mat_mult_f32>
 8000d42:	4603      	mov	r3, r0
 8000d44:	f887 312d 	strb.w	r3, [r7, #301]	@ 0x12d
		status = arm_mat_inverse_f32(&R, &Rinv);
 8000d48:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 8000d4c:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8000d50:	4611      	mov	r1, r2
 8000d52:	4618      	mov	r0, r3
 8000d54:	f001 ff62 	bl	8002c1c <arm_mat_inverse_f32>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	f887 312d 	strb.w	r3, [r7, #301]	@ 0x12d
 8000d5e:	46a5      	mov	sp, r4
	}

	float32_t a_f32[antArrSize*1*4];
 8000d60:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000d64:	0099      	lsls	r1, r3, #2
 8000d66:	1e4b      	subs	r3, r1, #1
 8000d68:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8000d6c:	460a      	mov	r2, r1
 8000d6e:	2300      	movs	r3, #0
 8000d70:	65ba      	str	r2, [r7, #88]	@ 0x58
 8000d72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000d74:	f04f 0200 	mov.w	r2, #0
 8000d78:	f04f 0300 	mov.w	r3, #0
 8000d7c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8000d80:	4628      	mov	r0, r5
 8000d82:	0143      	lsls	r3, r0, #5
 8000d84:	4620      	mov	r0, r4
 8000d86:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000d8a:	4620      	mov	r0, r4
 8000d8c:	0142      	lsls	r2, r0, #5
 8000d8e:	460a      	mov	r2, r1
 8000d90:	2300      	movs	r3, #0
 8000d92:	653a      	str	r2, [r7, #80]	@ 0x50
 8000d94:	657b      	str	r3, [r7, #84]	@ 0x54
 8000d96:	f04f 0200 	mov.w	r2, #0
 8000d9a:	f04f 0300 	mov.w	r3, #0
 8000d9e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8000da2:	4628      	mov	r0, r5
 8000da4:	0143      	lsls	r3, r0, #5
 8000da6:	4620      	mov	r0, r4
 8000da8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000dac:	4620      	mov	r0, r4
 8000dae:	0142      	lsls	r2, r0, #5
 8000db0:	460b      	mov	r3, r1
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	3307      	adds	r3, #7
 8000db6:	08db      	lsrs	r3, r3, #3
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	ebad 0d03 	sub.w	sp, sp, r3
 8000dbe:	466b      	mov	r3, sp
 8000dc0:	3303      	adds	r3, #3
 8000dc2:	089b      	lsrs	r3, r3, #2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	float32_t aH_f32[antArrSize*1*4];
 8000dca:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000dce:	0099      	lsls	r1, r3, #2
 8000dd0:	1e4b      	subs	r3, r1, #1
 8000dd2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8000dd6:	460a      	mov	r2, r1
 8000dd8:	2300      	movs	r3, #0
 8000dda:	64ba      	str	r2, [r7, #72]	@ 0x48
 8000ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000dde:	f04f 0200 	mov.w	r2, #0
 8000de2:	f04f 0300 	mov.w	r3, #0
 8000de6:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8000dea:	4628      	mov	r0, r5
 8000dec:	0143      	lsls	r3, r0, #5
 8000dee:	4620      	mov	r0, r4
 8000df0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000df4:	4620      	mov	r0, r4
 8000df6:	0142      	lsls	r2, r0, #5
 8000df8:	460a      	mov	r2, r1
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	643a      	str	r2, [r7, #64]	@ 0x40
 8000dfe:	647b      	str	r3, [r7, #68]	@ 0x44
 8000e00:	f04f 0200 	mov.w	r2, #0
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8000e0c:	4628      	mov	r0, r5
 8000e0e:	0143      	lsls	r3, r0, #5
 8000e10:	4620      	mov	r0, r4
 8000e12:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000e16:	4620      	mov	r0, r4
 8000e18:	0142      	lsls	r2, r0, #5
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	3307      	adds	r3, #7
 8000e20:	08db      	lsrs	r3, r3, #3
 8000e22:	00db      	lsls	r3, r3, #3
 8000e24:	ebad 0d03 	sub.w	sp, sp, r3
 8000e28:	466b      	mov	r3, sp
 8000e2a:	3303      	adds	r3, #3
 8000e2c:	089b      	lsrs	r3, r3, #2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

	uint16_t numCols = 1;
 8000e34:	2301      	movs	r3, #1
 8000e36:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
		for (int i=0;i<antArrSize;i++)
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8000e40:	e098      	b.n	8000f74 <MVDR_f32+0x600>
		{
			for (int j=0;j<1;j++)
 8000e42:	2300      	movs	r3, #0
 8000e44:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8000e48:	e08a      	b.n	8000f60 <MVDR_f32+0x5ec>
			{
				a_f32[i*numCols*2					+			  j] =  weights[i*numCols+j]; //Верхняя левая матрица
 8000e4a:	f8b7 211a 	ldrh.w	r2, [r7, #282]	@ 0x11a
 8000e4e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8000e52:	fb03 f202 	mul.w	r2, r3, r2
 8000e56:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8000e5a:	4413      	add	r3, r2
 8000e5c:	009a      	lsls	r2, r3, #2
 8000e5e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000e62:	1899      	adds	r1, r3, r2
 8000e64:	f8b7 211a 	ldrh.w	r2, [r7, #282]	@ 0x11a
 8000e68:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8000e6c:	fb02 f303 	mul.w	r3, r2, r3
 8000e70:	005a      	lsls	r2, r3, #1
 8000e72:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8000e76:	4413      	add	r3, r2
 8000e78:	6809      	ldr	r1, [r1, #0]
 8000e7a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	4413      	add	r3, r2
 8000e82:	6019      	str	r1, [r3, #0]
				a_f32[(i+antArrSize)*numCols*2	+		   	  j] =  weights[i*numCols+j+1]; //Нижняя левая матрица
 8000e84:	f8b7 211a 	ldrh.w	r2, [r7, #282]	@ 0x11a
 8000e88:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8000e8c:	fb03 f202 	mul.w	r2, r3, r2
 8000e90:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8000e94:	4413      	add	r3, r2
 8000e96:	3301      	adds	r3, #1
 8000e98:	009a      	lsls	r2, r3, #2
 8000e9a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000e9e:	1899      	adds	r1, r3, r2
 8000ea0:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 8000ea4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8000ea8:	441a      	add	r2, r3
 8000eaa:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 8000eae:	fb02 f303 	mul.w	r3, r2, r3
 8000eb2:	005a      	lsls	r2, r3, #1
 8000eb4:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8000eb8:	4413      	add	r3, r2
 8000eba:	6809      	ldr	r1, [r1, #0]
 8000ebc:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	6019      	str	r1, [r3, #0]
				a_f32[i*numCols*2					+	(j+numCols)] = -weights[i*numCols+j+1]; //Верхняя правая матрица
 8000ec6:	f8b7 211a 	ldrh.w	r2, [r7, #282]	@ 0x11a
 8000eca:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8000ece:	fb03 f202 	mul.w	r2, r3, r2
 8000ed2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8000ed6:	4413      	add	r3, r2
 8000ed8:	3301      	adds	r3, #1
 8000eda:	009a      	lsls	r2, r3, #2
 8000edc:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000ee0:	4413      	add	r3, r2
 8000ee2:	edd3 7a00 	vldr	s15, [r3]
 8000ee6:	f8b7 211a 	ldrh.w	r2, [r7, #282]	@ 0x11a
 8000eea:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8000eee:	fb02 f303 	mul.w	r3, r2, r3
 8000ef2:	0059      	lsls	r1, r3, #1
 8000ef4:	f8b7 211a 	ldrh.w	r2, [r7, #282]	@ 0x11a
 8000ef8:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8000efc:	4413      	add	r3, r2
 8000efe:	440b      	add	r3, r1
 8000f00:	eef1 7a67 	vneg.f32	s15, s15
 8000f04:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	4413      	add	r3, r2
 8000f0c:	edc3 7a00 	vstr	s15, [r3]
				a_f32[(i+antArrSize)*numCols*2	+	(j+numCols)] =  weights[i*numCols+j]; //Нижняя правая матрица
 8000f10:	f8b7 211a 	ldrh.w	r2, [r7, #282]	@ 0x11a
 8000f14:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8000f18:	fb03 f202 	mul.w	r2, r3, r2
 8000f1c:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8000f20:	4413      	add	r3, r2
 8000f22:	009a      	lsls	r2, r3, #2
 8000f24:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000f28:	1898      	adds	r0, r3, r2
 8000f2a:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 8000f2e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8000f32:	441a      	add	r2, r3
 8000f34:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 8000f38:	fb02 f303 	mul.w	r3, r2, r3
 8000f3c:	0059      	lsls	r1, r3, #1
 8000f3e:	f8b7 211a 	ldrh.w	r2, [r7, #282]	@ 0x11a
 8000f42:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8000f46:	4413      	add	r3, r2
 8000f48:	440b      	add	r3, r1
 8000f4a:	6801      	ldr	r1, [r0, #0]
 8000f4c:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4413      	add	r3, r2
 8000f54:	6019      	str	r1, [r3, #0]
			for (int j=0;j<1;j++)
 8000f56:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8000f60:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	f77f af70 	ble.w	8000e4a <MVDR_f32+0x4d6>
		for (int i=0;i<antArrSize;i++)
 8000f6a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8000f6e:	3301      	adds	r3, #1
 8000f70:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8000f74:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 8000f78:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	f6ff af60 	blt.w	8000e42 <MVDR_f32+0x4ce>
			}
		}

	float32_t Ria_f32[antArrSize*1*4]; // Rinv*a
 8000f82:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000f86:	0099      	lsls	r1, r3, #2
 8000f88:	1e4b      	subs	r3, r1, #1
 8000f8a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000f8e:	460a      	mov	r2, r1
 8000f90:	2300      	movs	r3, #0
 8000f92:	63ba      	str	r2, [r7, #56]	@ 0x38
 8000f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	f04f 0300 	mov.w	r3, #0
 8000f9e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8000fa2:	4628      	mov	r0, r5
 8000fa4:	0143      	lsls	r3, r0, #5
 8000fa6:	4620      	mov	r0, r4
 8000fa8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000fac:	4620      	mov	r0, r4
 8000fae:	0142      	lsls	r2, r0, #5
 8000fb0:	460a      	mov	r2, r1
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	633a      	str	r2, [r7, #48]	@ 0x30
 8000fb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	f04f 0300 	mov.w	r3, #0
 8000fc0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8000fc4:	4628      	mov	r0, r5
 8000fc6:	0143      	lsls	r3, r0, #5
 8000fc8:	4620      	mov	r0, r4
 8000fca:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000fce:	4620      	mov	r0, r4
 8000fd0:	0142      	lsls	r2, r0, #5
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	3307      	adds	r3, #7
 8000fd8:	08db      	lsrs	r3, r3, #3
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	ebad 0d03 	sub.w	sp, sp, r3
 8000fe0:	466b      	mov	r3, sp
 8000fe2:	3303      	adds	r3, #3
 8000fe4:	089b      	lsrs	r3, r3, #2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	float32_t aHRi_f32[antArrSize*1*4]; //aH*Rinv
 8000fec:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000ff0:	0099      	lsls	r1, r3, #2
 8000ff2:	1e4b      	subs	r3, r1, #1
 8000ff4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8000ff8:	460a      	mov	r2, r1
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62ba      	str	r2, [r7, #40]	@ 0x28
 8000ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001000:	f04f 0200 	mov.w	r2, #0
 8001004:	f04f 0300 	mov.w	r3, #0
 8001008:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800100c:	4628      	mov	r0, r5
 800100e:	0143      	lsls	r3, r0, #5
 8001010:	4620      	mov	r0, r4
 8001012:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001016:	4620      	mov	r0, r4
 8001018:	0142      	lsls	r2, r0, #5
 800101a:	460a      	mov	r2, r1
 800101c:	2300      	movs	r3, #0
 800101e:	623a      	str	r2, [r7, #32]
 8001020:	627b      	str	r3, [r7, #36]	@ 0x24
 8001022:	f04f 0200 	mov.w	r2, #0
 8001026:	f04f 0300 	mov.w	r3, #0
 800102a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800102e:	4628      	mov	r0, r5
 8001030:	0143      	lsls	r3, r0, #5
 8001032:	4620      	mov	r0, r4
 8001034:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001038:	4620      	mov	r0, r4
 800103a:	0142      	lsls	r2, r0, #5
 800103c:	460b      	mov	r3, r1
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	3307      	adds	r3, #7
 8001042:	08db      	lsrs	r3, r3, #3
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	ebad 0d03 	sub.w	sp, sp, r3
 800104a:	466b      	mov	r3, sp
 800104c:	3303      	adds	r3, #3
 800104e:	089b      	lsrs	r3, r3, #2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	arm_matrix_instance_f32 aH;
	arm_matrix_instance_f32 Ria; // NxN * Nx1 = Nx1
	arm_matrix_instance_f32 aHRi; // 1xN * NxN = Nx1
	arm_matrix_instance_f32 aHRia; // Nx1 * 1xN = 1x1

	arm_mat_init_f32(&a, antArrSize*2, 1*2, (float32_t *)a_f32);
 8001056:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800105a:	b29b      	uxth	r3, r3
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	b299      	uxth	r1, r3
 8001060:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 8001064:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001068:	2202      	movs	r2, #2
 800106a:	f001 fed5 	bl	8002e18 <arm_mat_init_f32>
	arm_mat_init_f32(&aH, 1*2, antArrSize*2, (float32_t *)aH_f32);
 800106e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8001072:	b29b      	uxth	r3, r3
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	b29a      	uxth	r2, r3
 8001078:	f107 00c8 	add.w	r0, r7, #200	@ 0xc8
 800107c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001080:	2102      	movs	r1, #2
 8001082:	f001 fec9 	bl	8002e18 <arm_mat_init_f32>

	arm_mat_init_f32(&Ria, antArrSize*2, 1*2, (float32_t *)Ria_f32);
 8001086:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800108a:	b29b      	uxth	r3, r3
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	b299      	uxth	r1, r3
 8001090:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8001094:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001098:	2202      	movs	r2, #2
 800109a:	f001 febd 	bl	8002e18 <arm_mat_init_f32>
	arm_mat_init_f32(&aHRi, 1*2, antArrSize*2, (float32_t *)aHRi_f32);
 800109e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 80010ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80010b0:	2102      	movs	r1, #2
 80010b2:	f001 feb1 	bl	8002e18 <arm_mat_init_f32>
	arm_mat_init_f32(&aHRia, 2, 2, (float32_t *)aHRia_f32);
 80010b6:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80010ba:	f107 00b0 	add.w	r0, r7, #176	@ 0xb0
 80010be:	2202      	movs	r2, #2
 80010c0:	2102      	movs	r1, #2
 80010c2:	f001 fea9 	bl	8002e18 <arm_mat_init_f32>


	status = arm_mat_trans_f32(&a, &aH);
 80010c6:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 80010ca:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f001 fca1 	bl	8002a18 <arm_mat_trans_f32>
 80010d6:	4603      	mov	r3, r0
 80010d8:	f887 312d 	strb.w	r3, [r7, #301]	@ 0x12d
	status = arm_mat_mult_f32(&Rinv, &a, &Ria);
 80010dc:	f107 02c0 	add.w	r2, r7, #192	@ 0xc0
 80010e0:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 80010e4:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 fcf3 	bl	8002ad4 <arm_mat_mult_f32>
 80010ee:	4603      	mov	r3, r0
 80010f0:	f887 312d 	strb.w	r3, [r7, #301]	@ 0x12d
	status = arm_mat_mult_f32(&aH, &Rinv, &aHRi);
 80010f4:	f107 02b8 	add.w	r2, r7, #184	@ 0xb8
 80010f8:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 80010fc:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8001100:	4618      	mov	r0, r3
 8001102:	f001 fce7 	bl	8002ad4 <arm_mat_mult_f32>
 8001106:	4603      	mov	r3, r0
 8001108:	f887 312d 	strb.w	r3, [r7, #301]	@ 0x12d
	status = arm_mat_mult_f32(&aHRi, &a, &aHRia);
 800110c:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 8001110:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 8001114:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001118:	4618      	mov	r0, r3
 800111a:	f001 fcdb 	bl	8002ad4 <arm_mat_mult_f32>
 800111e:	4603      	mov	r3, r0
 8001120:	f887 312d 	strb.w	r3, [r7, #301]	@ 0x12d

	float32_t numerator[antArrSize*1*2];
 8001124:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8001128:	0059      	lsls	r1, r3, #1
 800112a:	1e4b      	subs	r3, r1, #1
 800112c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001130:	460a      	mov	r2, r1
 8001132:	2300      	movs	r3, #0
 8001134:	61ba      	str	r2, [r7, #24]
 8001136:	61fb      	str	r3, [r7, #28]
 8001138:	f04f 0200 	mov.w	r2, #0
 800113c:	f04f 0300 	mov.w	r3, #0
 8001140:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001144:	4628      	mov	r0, r5
 8001146:	0143      	lsls	r3, r0, #5
 8001148:	4620      	mov	r0, r4
 800114a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800114e:	4620      	mov	r0, r4
 8001150:	0142      	lsls	r2, r0, #5
 8001152:	460a      	mov	r2, r1
 8001154:	2300      	movs	r3, #0
 8001156:	613a      	str	r2, [r7, #16]
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	f04f 0300 	mov.w	r3, #0
 8001162:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001166:	4628      	mov	r0, r5
 8001168:	0143      	lsls	r3, r0, #5
 800116a:	4620      	mov	r0, r4
 800116c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001170:	4620      	mov	r0, r4
 8001172:	0142      	lsls	r2, r0, #5
 8001174:	460b      	mov	r3, r1
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	3307      	adds	r3, #7
 800117a:	08db      	lsrs	r3, r3, #3
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	ebad 0d03 	sub.w	sp, sp, r3
 8001182:	466b      	mov	r3, sp
 8001184:	3303      	adds	r3, #3
 8001186:	089b      	lsrs	r3, r3, #2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

	for (int i=0; i< antArrSize;i++)
 800118e:	2300      	movs	r3, #0
 8001190:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001194:	e026      	b.n	80011e4 <MVDR_f32+0x870>
	{
		numerator[i] = Ria_f32[i];
 8001196:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800119a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 80011a8:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	440b      	add	r3, r1
 80011b0:	601a      	str	r2, [r3, #0]
		numerator[i*2]=-Ria_f32[i*2];
 80011b2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	edd3 7a00 	vldr	s15, [r3]
 80011c4:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	eef1 7a67 	vneg.f32	s15, s15
 80011ce:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	edc3 7a00 	vstr	s15, [r3]
	for (int i=0; i< antArrSize;i++)
 80011da:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80011de:	3301      	adds	r3, #1
 80011e0:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80011e4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80011e8:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 80011ec:	429a      	cmp	r2, r3
 80011ee:	dbd2      	blt.n	8001196 <MVDR_f32+0x822>
	}

	float32_t denomenator[2];

	denomenator[0]=aHRia_f32[0]/(aHRia_f32[0]*aHRia_f32[0]+aHRia_f32[1]*aHRia_f32[1]);
 80011f0:	edd7 6a36 	vldr	s13, [r7, #216]	@ 0xd8
 80011f4:	ed97 7a36 	vldr	s14, [r7, #216]	@ 0xd8
 80011f8:	edd7 7a36 	vldr	s15, [r7, #216]	@ 0xd8
 80011fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001200:	ed97 6a37 	vldr	s12, [r7, #220]	@ 0xdc
 8001204:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8001208:	ee66 7a27 	vmul.f32	s15, s12, s15
 800120c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001210:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001214:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
	denomenator[1]=aHRia_f32[1]/(aHRia_f32[0]*aHRia_f32[0]+aHRia_f32[1]*aHRia_f32[1]);
 8001218:	edd7 6a37 	vldr	s13, [r7, #220]	@ 0xdc
 800121c:	ed97 7a36 	vldr	s14, [r7, #216]	@ 0xd8
 8001220:	edd7 7a36 	vldr	s15, [r7, #216]	@ 0xd8
 8001224:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001228:	ed97 6a37 	vldr	s12, [r7, #220]	@ 0xdc
 800122c:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8001230:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001234:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001238:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800123c:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac


	float32_t denumv[antArrSize*1*2];
 8001240:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8001244:	0059      	lsls	r1, r3, #1
 8001246:	1e4b      	subs	r3, r1, #1
 8001248:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800124c:	460a      	mov	r2, r1
 800124e:	2300      	movs	r3, #0
 8001250:	60ba      	str	r2, [r7, #8]
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	f04f 0200 	mov.w	r2, #0
 8001258:	f04f 0300 	mov.w	r3, #0
 800125c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001260:	4628      	mov	r0, r5
 8001262:	0143      	lsls	r3, r0, #5
 8001264:	4620      	mov	r0, r4
 8001266:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800126a:	4620      	mov	r0, r4
 800126c:	0142      	lsls	r2, r0, #5
 800126e:	460a      	mov	r2, r1
 8001270:	2300      	movs	r3, #0
 8001272:	603a      	str	r2, [r7, #0]
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	f04f 0200 	mov.w	r2, #0
 800127a:	f04f 0300 	mov.w	r3, #0
 800127e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001282:	4628      	mov	r0, r5
 8001284:	0143      	lsls	r3, r0, #5
 8001286:	4620      	mov	r0, r4
 8001288:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800128c:	4620      	mov	r0, r4
 800128e:	0142      	lsls	r2, r0, #5
 8001290:	460b      	mov	r3, r1
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	3307      	adds	r3, #7
 8001296:	08db      	lsrs	r3, r3, #3
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	ebad 0d03 	sub.w	sp, sp, r3
 800129e:	466b      	mov	r3, sp
 80012a0:	3303      	adds	r3, #3
 80012a2:	089b      	lsrs	r3, r3, #2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8

	for (int i=0; i< antArrSize;i++)
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80012b0:	e017      	b.n	80012e2 <MVDR_f32+0x96e>
	{
		denumv[i] = denomenator[0];
 80012b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80012b6:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 80012ba:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	440b      	add	r3, r1
 80012c2:	601a      	str	r2, [r3, #0]
		denumv[i*2]=denomenator[1];
 80012c4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80012ce:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	440b      	add	r3, r1
 80012d6:	601a      	str	r2, [r3, #0]
	for (int i=0; i< antArrSize;i++)
 80012d8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80012dc:	3301      	adds	r3, #1
 80012de:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80012e2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80012e6:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 80012ea:	429a      	cmp	r2, r3
 80012ec:	dbe1      	blt.n	80012b2 <MVDR_f32+0x93e>
	}

	arm_cmplx_mult_cmplx_f32(numerator, denumv, mvdrWeights, antArrSize);
 80012ee:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80012f2:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80012f6:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 80012fa:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 80012fe:	f001 fd8f 	bl	8002e20 <arm_cmplx_mult_cmplx_f32>


	return status;
 8001302:	f997 312d 	ldrsb.w	r3, [r7, #301]	@ 0x12d
 8001306:	46b5      	mov	sp, r6

}
 8001308:	4618      	mov	r0, r3
 800130a:	f507 77b6 	add.w	r7, r7, #364	@ 0x16c
 800130e:	46bd      	mov	sp, r7
 8001310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001314 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001318:	b086      	sub	sp, #24
 800131a:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800131c:	f000 f904 	bl	8001528 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001320:	f000 fa20 	bl	8001764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001324:	f000 f868 	bl	80013f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001328:	f000 f8d4 	bl	80014d4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  CoreDebug -> DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800132c:	4b27      	ldr	r3, [pc, #156]	@ (80013cc <main+0xb8>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	4a26      	ldr	r2, [pc, #152]	@ (80013cc <main+0xb8>)
 8001332:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001336:	60d3      	str	r3, [r2, #12]
  DWT -> CYCCNT = 0;
 8001338:	4b25      	ldr	r3, [pc, #148]	@ (80013d0 <main+0xbc>)
 800133a:	2200      	movs	r2, #0
 800133c:	605a      	str	r2, [r3, #4]
  DWT -> CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800133e:	4b24      	ldr	r3, [pc, #144]	@ (80013d0 <main+0xbc>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a23      	ldr	r2, [pc, #140]	@ (80013d0 <main+0xbc>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6013      	str	r3, [r2, #0]


  uint64_t t1 = DWT -> CYCCNT;
 800134a:	4b21      	ldr	r3, [pc, #132]	@ (80013d0 <main+0xbc>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	469a      	mov	sl, r3
 8001352:	4693      	mov	fp, r2
 8001354:	e9c7 ab02 	strd	sl, fp, [r7, #8]
  //CODE TO MEASURE BEGING

  mvstatus = MVDR_f32(arraySize, snapshotSize, snapshotI, snapshotQ, (float32_t *)qiescentWeights, mvdrWeights);
 8001358:	4b1e      	ldr	r3, [pc, #120]	@ (80013d4 <main+0xc0>)
 800135a:	7818      	ldrb	r0, [r3, #0]
 800135c:	4b1e      	ldr	r3, [pc, #120]	@ (80013d8 <main+0xc4>)
 800135e:	8819      	ldrh	r1, [r3, #0]
 8001360:	4b1e      	ldr	r3, [pc, #120]	@ (80013dc <main+0xc8>)
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	4b1e      	ldr	r3, [pc, #120]	@ (80013e0 <main+0xcc>)
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	4b1e      	ldr	r3, [pc, #120]	@ (80013e4 <main+0xd0>)
 800136a:	4a1f      	ldr	r2, [pc, #124]	@ (80013e8 <main+0xd4>)
 800136c:	f7ff fb02 	bl	8000974 <MVDR_f32>
 8001370:	4603      	mov	r3, r0
 8001372:	461a      	mov	r2, r3
 8001374:	4b1d      	ldr	r3, [pc, #116]	@ (80013ec <main+0xd8>)
 8001376:	701a      	strb	r2, [r3, #0]

  //CODE TO MEASURE END
  uint64_t t2 = DWT -> CYCCNT;
 8001378:	4b15      	ldr	r3, [pc, #84]	@ (80013d0 <main+0xbc>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	4698      	mov	r8, r3
 8001380:	4691      	mov	r9, r2
 8001382:	e9c7 8900 	strd	r8, r9, [r7]

  execcyc = t2-t1;
 8001386:	e9d7 0100 	ldrd	r0, r1, [r7]
 800138a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800138e:	1a84      	subs	r4, r0, r2
 8001390:	eb61 0503 	sbc.w	r5, r1, r3
 8001394:	4b16      	ldr	r3, [pc, #88]	@ (80013f0 <main+0xdc>)
 8001396:	e9c3 4500 	strd	r4, r5, [r3]
  execus = execcyc/CPUFREQ;
 800139a:	4b15      	ldr	r3, [pc, #84]	@ (80013f0 <main+0xdc>)
 800139c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013a0:	f240 2226 	movw	r2, #550	@ 0x226
 80013a4:	f04f 0300 	mov.w	r3, #0
 80013a8:	f7ff f96c 	bl	8000684 <__aeabi_uldivmod>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4610      	mov	r0, r2
 80013b2:	4619      	mov	r1, r3
 80013b4:	f7ff f930 	bl	8000618 <__aeabi_ul2d>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	490d      	ldr	r1, [pc, #52]	@ (80013f4 <main+0xe0>)
 80013be:	e9c1 2300 	strd	r2, r3, [r1]

  HAL_Delay(10);
 80013c2:	200a      	movs	r0, #10
 80013c4:	f000 fa60 	bl	8001888 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <main+0xb4>
 80013cc:	e000edf0 	.word	0xe000edf0
 80013d0:	e0001000 	.word	0xe0001000
 80013d4:	24000000 	.word	0x24000000
 80013d8:	24000002 	.word	0x24000002
 80013dc:	24008048 	.word	0x24008048
 80013e0:	08003024 	.word	0x08003024
 80013e4:	24004004 	.word	0x24004004
 80013e8:	24000004 	.word	0x24000004
 80013ec:	24008088 	.word	0x24008088
 80013f0:	24008038 	.word	0x24008038
 80013f4:	24008040 	.word	0x24008040

080013f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b09c      	sub	sp, #112	@ 0x70
 80013fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001402:	224c      	movs	r2, #76	@ 0x4c
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f001 fdd4 	bl	8002fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	2220      	movs	r2, #32
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f001 fdce 	bl	8002fb4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001418:	2002      	movs	r0, #2
 800141a:	f000 fbb9 	bl	8001b90 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800141e:	2300      	movs	r3, #0
 8001420:	603b      	str	r3, [r7, #0]
 8001422:	4b2b      	ldr	r3, [pc, #172]	@ (80014d0 <SystemClock_Config+0xd8>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	4a2a      	ldr	r2, [pc, #168]	@ (80014d0 <SystemClock_Config+0xd8>)
 8001428:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800142c:	6193      	str	r3, [r2, #24]
 800142e:	4b28      	ldr	r3, [pc, #160]	@ (80014d0 <SystemClock_Config+0xd8>)
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800143a:	bf00      	nop
 800143c:	4b24      	ldr	r3, [pc, #144]	@ (80014d0 <SystemClock_Config+0xd8>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001444:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001448:	d1f8      	bne.n	800143c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800144a:	2301      	movs	r3, #1
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800144e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001452:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001454:	2302      	movs	r3, #2
 8001456:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001458:	2302      	movs	r3, #2
 800145a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800145c:	2302      	movs	r3, #2
 800145e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8001460:	232c      	movs	r3, #44	@ 0x2c
 8001462:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001464:	2301      	movs	r3, #1
 8001466:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001468:	2302      	movs	r3, #2
 800146a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800146c:	2302      	movs	r3, #2
 800146e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001470:	230c      	movs	r3, #12
 8001472:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001474:	2300      	movs	r3, #0
 8001476:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800147c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001480:	4618      	mov	r0, r3
 8001482:	f000 fbbf 	bl	8001c04 <HAL_RCC_OscConfig>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800148c:	f000 f878 	bl	8001580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001490:	233f      	movs	r3, #63	@ 0x3f
 8001492:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001494:	2303      	movs	r3, #3
 8001496:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800149c:	2308      	movs	r3, #8
 800149e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80014a0:	2340      	movs	r3, #64	@ 0x40
 80014a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80014a4:	2340      	movs	r3, #64	@ 0x40
 80014a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80014a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014ac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80014ae:	2340      	movs	r3, #64	@ 0x40
 80014b0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	2103      	movs	r1, #3
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 ff7e 	bl	80023b8 <HAL_RCC_ClockConfig>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80014c2:	f000 f85d 	bl	8001580 <Error_Handler>
  }
}
 80014c6:	bf00      	nop
 80014c8:	3770      	adds	r7, #112	@ 0x70
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	58024800 	.word	0x58024800

080014d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014da:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <MX_GPIO_Init+0x50>)
 80014dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014e0:	4a10      	ldr	r2, [pc, #64]	@ (8001524 <MX_GPIO_Init+0x50>)
 80014e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001524 <MX_GPIO_Init+0x50>)
 80014ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001524 <MX_GPIO_Init+0x50>)
 80014fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014fe:	4a09      	ldr	r2, [pc, #36]	@ (8001524 <MX_GPIO_Init+0x50>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001508:	4b06      	ldr	r3, [pc, #24]	@ (8001524 <MX_GPIO_Init+0x50>)
 800150a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	58024400 	.word	0x58024400

08001528 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800152e:	463b      	mov	r3, r7
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800153a:	f000 faad 	bl	8001a98 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800153e:	2301      	movs	r3, #1
 8001540:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001542:	2300      	movs	r3, #0
 8001544:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001546:	2300      	movs	r3, #0
 8001548:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800154a:	231f      	movs	r3, #31
 800154c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800154e:	2387      	movs	r3, #135	@ 0x87
 8001550:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001552:	2300      	movs	r3, #0
 8001554:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001556:	2300      	movs	r3, #0
 8001558:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800155a:	2301      	movs	r3, #1
 800155c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800155e:	2301      	movs	r3, #1
 8001560:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001562:	2300      	movs	r3, #0
 8001564:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001566:	2300      	movs	r3, #0
 8001568:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800156a:	463b      	mov	r3, r7
 800156c:	4618      	mov	r0, r3
 800156e:	f000 facb 	bl	8001b08 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001572:	2004      	movs	r0, #4
 8001574:	f000 faa8 	bl	8001ac8 <HAL_MPU_Enable>

}
 8001578:	bf00      	nop
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001584:	b672      	cpsid	i
}
 8001586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <Error_Handler+0x8>

0800158c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001592:	4b0a      	ldr	r3, [pc, #40]	@ (80015bc <HAL_MspInit+0x30>)
 8001594:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001598:	4a08      	ldr	r2, [pc, #32]	@ (80015bc <HAL_MspInit+0x30>)
 800159a:	f043 0302 	orr.w	r3, r3, #2
 800159e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80015a2:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <HAL_MspInit+0x30>)
 80015a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	607b      	str	r3, [r7, #4]
 80015ae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	58024400 	.word	0x58024400

080015c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <NMI_Handler+0x4>

080015c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <HardFault_Handler+0x4>

080015d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <MemManage_Handler+0x4>

080015d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <BusFault_Handler+0x4>

080015e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <UsageFault_Handler+0x4>

080015e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001616:	f000 f917 	bl	8001848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001624:	4b32      	ldr	r3, [pc, #200]	@ (80016f0 <SystemInit+0xd0>)
 8001626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800162a:	4a31      	ldr	r2, [pc, #196]	@ (80016f0 <SystemInit+0xd0>)
 800162c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001630:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001634:	4b2f      	ldr	r3, [pc, #188]	@ (80016f4 <SystemInit+0xd4>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 030f 	and.w	r3, r3, #15
 800163c:	2b06      	cmp	r3, #6
 800163e:	d807      	bhi.n	8001650 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001640:	4b2c      	ldr	r3, [pc, #176]	@ (80016f4 <SystemInit+0xd4>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f023 030f 	bic.w	r3, r3, #15
 8001648:	4a2a      	ldr	r2, [pc, #168]	@ (80016f4 <SystemInit+0xd4>)
 800164a:	f043 0307 	orr.w	r3, r3, #7
 800164e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001650:	4b29      	ldr	r3, [pc, #164]	@ (80016f8 <SystemInit+0xd8>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a28      	ldr	r2, [pc, #160]	@ (80016f8 <SystemInit+0xd8>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800165c:	4b26      	ldr	r3, [pc, #152]	@ (80016f8 <SystemInit+0xd8>)
 800165e:	2200      	movs	r2, #0
 8001660:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001662:	4b25      	ldr	r3, [pc, #148]	@ (80016f8 <SystemInit+0xd8>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	4924      	ldr	r1, [pc, #144]	@ (80016f8 <SystemInit+0xd8>)
 8001668:	4b24      	ldr	r3, [pc, #144]	@ (80016fc <SystemInit+0xdc>)
 800166a:	4013      	ands	r3, r2
 800166c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800166e:	4b21      	ldr	r3, [pc, #132]	@ (80016f4 <SystemInit+0xd4>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	2b00      	cmp	r3, #0
 8001678:	d007      	beq.n	800168a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800167a:	4b1e      	ldr	r3, [pc, #120]	@ (80016f4 <SystemInit+0xd4>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f023 030f 	bic.w	r3, r3, #15
 8001682:	4a1c      	ldr	r2, [pc, #112]	@ (80016f4 <SystemInit+0xd4>)
 8001684:	f043 0307 	orr.w	r3, r3, #7
 8001688:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800168a:	4b1b      	ldr	r3, [pc, #108]	@ (80016f8 <SystemInit+0xd8>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001690:	4b19      	ldr	r3, [pc, #100]	@ (80016f8 <SystemInit+0xd8>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001696:	4b18      	ldr	r3, [pc, #96]	@ (80016f8 <SystemInit+0xd8>)
 8001698:	2200      	movs	r2, #0
 800169a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800169c:	4b16      	ldr	r3, [pc, #88]	@ (80016f8 <SystemInit+0xd8>)
 800169e:	4a18      	ldr	r2, [pc, #96]	@ (8001700 <SystemInit+0xe0>)
 80016a0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80016a2:	4b15      	ldr	r3, [pc, #84]	@ (80016f8 <SystemInit+0xd8>)
 80016a4:	4a17      	ldr	r2, [pc, #92]	@ (8001704 <SystemInit+0xe4>)
 80016a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80016a8:	4b13      	ldr	r3, [pc, #76]	@ (80016f8 <SystemInit+0xd8>)
 80016aa:	4a17      	ldr	r2, [pc, #92]	@ (8001708 <SystemInit+0xe8>)
 80016ac:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80016ae:	4b12      	ldr	r3, [pc, #72]	@ (80016f8 <SystemInit+0xd8>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80016b4:	4b10      	ldr	r3, [pc, #64]	@ (80016f8 <SystemInit+0xd8>)
 80016b6:	4a14      	ldr	r2, [pc, #80]	@ (8001708 <SystemInit+0xe8>)
 80016b8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80016ba:	4b0f      	ldr	r3, [pc, #60]	@ (80016f8 <SystemInit+0xd8>)
 80016bc:	2200      	movs	r2, #0
 80016be:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80016c0:	4b0d      	ldr	r3, [pc, #52]	@ (80016f8 <SystemInit+0xd8>)
 80016c2:	4a11      	ldr	r2, [pc, #68]	@ (8001708 <SystemInit+0xe8>)
 80016c4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80016c6:	4b0c      	ldr	r3, [pc, #48]	@ (80016f8 <SystemInit+0xd8>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016cc:	4b0a      	ldr	r3, [pc, #40]	@ (80016f8 <SystemInit+0xd8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a09      	ldr	r2, [pc, #36]	@ (80016f8 <SystemInit+0xd8>)
 80016d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80016d8:	4b07      	ldr	r3, [pc, #28]	@ (80016f8 <SystemInit+0xd8>)
 80016da:	2200      	movs	r2, #0
 80016dc:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80016de:	4b0b      	ldr	r3, [pc, #44]	@ (800170c <SystemInit+0xec>)
 80016e0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80016e4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000ed00 	.word	0xe000ed00
 80016f4:	52002000 	.word	0x52002000
 80016f8:	58024400 	.word	0x58024400
 80016fc:	eaf6ed7f 	.word	0xeaf6ed7f
 8001700:	02020200 	.word	0x02020200
 8001704:	01ff0000 	.word	0x01ff0000
 8001708:	01010280 	.word	0x01010280
 800170c:	52004000 	.word	0x52004000

08001710 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001710:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001748 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001714:	f7ff ff84 	bl	8001620 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001718:	480c      	ldr	r0, [pc, #48]	@ (800174c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800171a:	490d      	ldr	r1, [pc, #52]	@ (8001750 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800171c:	4a0d      	ldr	r2, [pc, #52]	@ (8001754 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001720:	e002      	b.n	8001728 <LoopCopyDataInit>

08001722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001726:	3304      	adds	r3, #4

08001728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800172c:	d3f9      	bcc.n	8001722 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800172e:	4a0a      	ldr	r2, [pc, #40]	@ (8001758 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001730:	4c0a      	ldr	r4, [pc, #40]	@ (800175c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001734:	e001      	b.n	800173a <LoopFillZerobss>

08001736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001738:	3204      	adds	r2, #4

0800173a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800173c:	d3fb      	bcc.n	8001736 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800173e:	f001 fc41 	bl	8002fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001742:	f7ff fde7 	bl	8001314 <main>
  bx  lr
 8001746:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001748:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800174c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001750:	24008014 	.word	0x24008014
  ldr r2, =_sidata
 8001754:	08003084 	.word	0x08003084
  ldr r2, =_sbss
 8001758:	24008018 	.word	0x24008018
  ldr r4, =_ebss
 800175c:	24008090 	.word	0x24008090

08001760 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001760:	e7fe      	b.n	8001760 <ADC3_IRQHandler>
	...

08001764 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800176a:	2003      	movs	r0, #3
 800176c:	f000 f962 	bl	8001a34 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001770:	f000 ffd8 	bl	8002724 <HAL_RCC_GetSysClockFreq>
 8001774:	4602      	mov	r2, r0
 8001776:	4b15      	ldr	r3, [pc, #84]	@ (80017cc <HAL_Init+0x68>)
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	0a1b      	lsrs	r3, r3, #8
 800177c:	f003 030f 	and.w	r3, r3, #15
 8001780:	4913      	ldr	r1, [pc, #76]	@ (80017d0 <HAL_Init+0x6c>)
 8001782:	5ccb      	ldrb	r3, [r1, r3]
 8001784:	f003 031f 	and.w	r3, r3, #31
 8001788:	fa22 f303 	lsr.w	r3, r2, r3
 800178c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800178e:	4b0f      	ldr	r3, [pc, #60]	@ (80017cc <HAL_Init+0x68>)
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	4a0e      	ldr	r2, [pc, #56]	@ (80017d0 <HAL_Init+0x6c>)
 8001798:	5cd3      	ldrb	r3, [r2, r3]
 800179a:	f003 031f 	and.w	r3, r3, #31
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	fa22 f303 	lsr.w	r3, r2, r3
 80017a4:	4a0b      	ldr	r2, [pc, #44]	@ (80017d4 <HAL_Init+0x70>)
 80017a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017a8:	4a0b      	ldr	r2, [pc, #44]	@ (80017d8 <HAL_Init+0x74>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017ae:	200f      	movs	r0, #15
 80017b0:	f000 f814 	bl	80017dc <HAL_InitTick>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e002      	b.n	80017c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017be:	f7ff fee5 	bl	800158c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	58024400 	.word	0x58024400
 80017d0:	08003064 	.word	0x08003064
 80017d4:	24008008 	.word	0x24008008
 80017d8:	24008004 	.word	0x24008004

080017dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80017e4:	4b15      	ldr	r3, [pc, #84]	@ (800183c <HAL_InitTick+0x60>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d101      	bne.n	80017f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e021      	b.n	8001834 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80017f0:	4b13      	ldr	r3, [pc, #76]	@ (8001840 <HAL_InitTick+0x64>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4b11      	ldr	r3, [pc, #68]	@ (800183c <HAL_InitTick+0x60>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	4619      	mov	r1, r3
 80017fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001802:	fbb2 f3f3 	udiv	r3, r2, r3
 8001806:	4618      	mov	r0, r3
 8001808:	f000 f939 	bl	8001a7e <HAL_SYSTICK_Config>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e00e      	b.n	8001834 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b0f      	cmp	r3, #15
 800181a:	d80a      	bhi.n	8001832 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800181c:	2200      	movs	r2, #0
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	f04f 30ff 	mov.w	r0, #4294967295
 8001824:	f000 f911 	bl	8001a4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001828:	4a06      	ldr	r2, [pc, #24]	@ (8001844 <HAL_InitTick+0x68>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800182e:	2300      	movs	r3, #0
 8001830:	e000      	b.n	8001834 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
}
 8001834:	4618      	mov	r0, r3
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	24008010 	.word	0x24008010
 8001840:	24008004 	.word	0x24008004
 8001844:	2400800c 	.word	0x2400800c

08001848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800184c:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <HAL_IncTick+0x20>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	4b06      	ldr	r3, [pc, #24]	@ (800186c <HAL_IncTick+0x24>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4413      	add	r3, r2
 8001858:	4a04      	ldr	r2, [pc, #16]	@ (800186c <HAL_IncTick+0x24>)
 800185a:	6013      	str	r3, [r2, #0]
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	24008010 	.word	0x24008010
 800186c:	2400808c 	.word	0x2400808c

08001870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  return uwTick;
 8001874:	4b03      	ldr	r3, [pc, #12]	@ (8001884 <HAL_GetTick+0x14>)
 8001876:	681b      	ldr	r3, [r3, #0]
}
 8001878:	4618      	mov	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	2400808c 	.word	0x2400808c

08001888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001890:	f7ff ffee 	bl	8001870 <HAL_GetTick>
 8001894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a0:	d005      	beq.n	80018ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018a2:	4b0a      	ldr	r3, [pc, #40]	@ (80018cc <HAL_Delay+0x44>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	461a      	mov	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4413      	add	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ae:	bf00      	nop
 80018b0:	f7ff ffde 	bl	8001870 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d8f7      	bhi.n	80018b0 <HAL_Delay+0x28>
  {
  }
}
 80018c0:	bf00      	nop
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	24008010 	.word	0x24008010

080018d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001910 <__NVIC_SetPriorityGrouping+0x40>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018ec:	4013      	ands	r3, r2
 80018ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018f8:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018fe:	4a04      	ldr	r2, [pc, #16]	@ (8001910 <__NVIC_SetPriorityGrouping+0x40>)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	60d3      	str	r3, [r2, #12]
}
 8001904:	bf00      	nop
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000ed00 	.word	0xe000ed00
 8001914:	05fa0000 	.word	0x05fa0000

08001918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800191c:	4b04      	ldr	r3, [pc, #16]	@ (8001930 <__NVIC_GetPriorityGrouping+0x18>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	0a1b      	lsrs	r3, r3, #8
 8001922:	f003 0307 	and.w	r3, r3, #7
}
 8001926:	4618      	mov	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	6039      	str	r1, [r7, #0]
 800193e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001940:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001944:	2b00      	cmp	r3, #0
 8001946:	db0a      	blt.n	800195e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	b2da      	uxtb	r2, r3
 800194c:	490c      	ldr	r1, [pc, #48]	@ (8001980 <__NVIC_SetPriority+0x4c>)
 800194e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001952:	0112      	lsls	r2, r2, #4
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	440b      	add	r3, r1
 8001958:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800195c:	e00a      	b.n	8001974 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	b2da      	uxtb	r2, r3
 8001962:	4908      	ldr	r1, [pc, #32]	@ (8001984 <__NVIC_SetPriority+0x50>)
 8001964:	88fb      	ldrh	r3, [r7, #6]
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	3b04      	subs	r3, #4
 800196c:	0112      	lsls	r2, r2, #4
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	440b      	add	r3, r1
 8001972:	761a      	strb	r2, [r3, #24]
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	e000e100 	.word	0xe000e100
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001988:	b480      	push	{r7}
 800198a:	b089      	sub	sp, #36	@ 0x24
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f1c3 0307 	rsb	r3, r3, #7
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	bf28      	it	cs
 80019a6:	2304      	movcs	r3, #4
 80019a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3304      	adds	r3, #4
 80019ae:	2b06      	cmp	r3, #6
 80019b0:	d902      	bls.n	80019b8 <NVIC_EncodePriority+0x30>
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	3b03      	subs	r3, #3
 80019b6:	e000      	b.n	80019ba <NVIC_EncodePriority+0x32>
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019bc:	f04f 32ff 	mov.w	r2, #4294967295
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43da      	mvns	r2, r3
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	401a      	ands	r2, r3
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d0:	f04f 31ff 	mov.w	r1, #4294967295
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	fa01 f303 	lsl.w	r3, r1, r3
 80019da:	43d9      	mvns	r1, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	4313      	orrs	r3, r2
         );
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3724      	adds	r7, #36	@ 0x24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a00:	d301      	bcc.n	8001a06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a02:	2301      	movs	r3, #1
 8001a04:	e00f      	b.n	8001a26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a06:	4a0a      	ldr	r2, [pc, #40]	@ (8001a30 <SysTick_Config+0x40>)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a0e:	210f      	movs	r1, #15
 8001a10:	f04f 30ff 	mov.w	r0, #4294967295
 8001a14:	f7ff ff8e 	bl	8001934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a18:	4b05      	ldr	r3, [pc, #20]	@ (8001a30 <SysTick_Config+0x40>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a1e:	4b04      	ldr	r3, [pc, #16]	@ (8001a30 <SysTick_Config+0x40>)
 8001a20:	2207      	movs	r2, #7
 8001a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	e000e010 	.word	0xe000e010

08001a34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff ff47 	bl	80018d0 <__NVIC_SetPriorityGrouping>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b086      	sub	sp, #24
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4603      	mov	r3, r0
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
 8001a56:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a58:	f7ff ff5e 	bl	8001918 <__NVIC_GetPriorityGrouping>
 8001a5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	68b9      	ldr	r1, [r7, #8]
 8001a62:	6978      	ldr	r0, [r7, #20]
 8001a64:	f7ff ff90 	bl	8001988 <NVIC_EncodePriority>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a6e:	4611      	mov	r1, r2
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff5f 	bl	8001934 <__NVIC_SetPriority>
}
 8001a76:	bf00      	nop
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ffb2 	bl	80019f0 <SysTick_Config>
 8001a8c:	4603      	mov	r3, r0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001a9c:	f3bf 8f5f 	dmb	sy
}
 8001aa0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001aa2:	4b07      	ldr	r3, [pc, #28]	@ (8001ac0 <HAL_MPU_Disable+0x28>)
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa6:	4a06      	ldr	r2, [pc, #24]	@ (8001ac0 <HAL_MPU_Disable+0x28>)
 8001aa8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001aac:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001aae:	4b05      	ldr	r3, [pc, #20]	@ (8001ac4 <HAL_MPU_Disable+0x2c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	605a      	str	r2, [r3, #4]
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	e000ed00 	.word	0xe000ed00
 8001ac4:	e000ed90 	.word	0xe000ed90

08001ac8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001ad0:	4a0b      	ldr	r2, [pc, #44]	@ (8001b00 <HAL_MPU_Enable+0x38>)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001ada:	4b0a      	ldr	r3, [pc, #40]	@ (8001b04 <HAL_MPU_Enable+0x3c>)
 8001adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ade:	4a09      	ldr	r2, [pc, #36]	@ (8001b04 <HAL_MPU_Enable+0x3c>)
 8001ae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ae4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001ae6:	f3bf 8f4f 	dsb	sy
}
 8001aea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001aec:	f3bf 8f6f 	isb	sy
}
 8001af0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	e000ed90 	.word	0xe000ed90
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	785a      	ldrb	r2, [r3, #1]
 8001b14:	4b1d      	ldr	r3, [pc, #116]	@ (8001b8c <HAL_MPU_ConfigRegion+0x84>)
 8001b16:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d029      	beq.n	8001b74 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001b20:	4a1a      	ldr	r2, [pc, #104]	@ (8001b8c <HAL_MPU_ConfigRegion+0x84>)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	7b1b      	ldrb	r3, [r3, #12]
 8001b2c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	7adb      	ldrb	r3, [r3, #11]
 8001b32:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b34:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	7a9b      	ldrb	r3, [r3, #10]
 8001b3a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b3c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	7b5b      	ldrb	r3, [r3, #13]
 8001b42:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b44:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	7b9b      	ldrb	r3, [r3, #14]
 8001b4a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b4c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	7bdb      	ldrb	r3, [r3, #15]
 8001b52:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b54:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	7a5b      	ldrb	r3, [r3, #9]
 8001b5a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b5c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	7a1b      	ldrb	r3, [r3, #8]
 8001b62:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b64:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	7812      	ldrb	r2, [r2, #0]
 8001b6a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b6c:	4a07      	ldr	r2, [pc, #28]	@ (8001b8c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b6e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b70:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001b72:	e005      	b.n	8001b80 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001b74:	4b05      	ldr	r3, [pc, #20]	@ (8001b8c <HAL_MPU_ConfigRegion+0x84>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001b7a:	4b04      	ldr	r3, [pc, #16]	@ (8001b8c <HAL_MPU_ConfigRegion+0x84>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	611a      	str	r2, [r3, #16]
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	e000ed90 	.word	0xe000ed90

08001b90 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001b98:	4b19      	ldr	r3, [pc, #100]	@ (8001c00 <HAL_PWREx_ConfigSupply+0x70>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d00a      	beq.n	8001bba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001ba4:	4b16      	ldr	r3, [pc, #88]	@ (8001c00 <HAL_PWREx_ConfigSupply+0x70>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d001      	beq.n	8001bb6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e01f      	b.n	8001bf6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	e01d      	b.n	8001bf6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001bba:	4b11      	ldr	r3, [pc, #68]	@ (8001c00 <HAL_PWREx_ConfigSupply+0x70>)
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	f023 0207 	bic.w	r2, r3, #7
 8001bc2:	490f      	ldr	r1, [pc, #60]	@ (8001c00 <HAL_PWREx_ConfigSupply+0x70>)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001bca:	f7ff fe51 	bl	8001870 <HAL_GetTick>
 8001bce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001bd0:	e009      	b.n	8001be6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001bd2:	f7ff fe4d 	bl	8001870 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001be0:	d901      	bls.n	8001be6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e007      	b.n	8001bf6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001be6:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <HAL_PWREx_ConfigSupply+0x70>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001bf2:	d1ee      	bne.n	8001bd2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	58024800 	.word	0x58024800

08001c04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08c      	sub	sp, #48	@ 0x30
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e3c8      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 8087 	beq.w	8001d32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c24:	4b88      	ldr	r3, [pc, #544]	@ (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c2e:	4b86      	ldr	r3, [pc, #536]	@ (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c32:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c36:	2b10      	cmp	r3, #16
 8001c38:	d007      	beq.n	8001c4a <HAL_RCC_OscConfig+0x46>
 8001c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c3c:	2b18      	cmp	r3, #24
 8001c3e:	d110      	bne.n	8001c62 <HAL_RCC_OscConfig+0x5e>
 8001c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d10b      	bne.n	8001c62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4a:	4b7f      	ldr	r3, [pc, #508]	@ (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d06c      	beq.n	8001d30 <HAL_RCC_OscConfig+0x12c>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d168      	bne.n	8001d30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e3a2      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c6a:	d106      	bne.n	8001c7a <HAL_RCC_OscConfig+0x76>
 8001c6c:	4b76      	ldr	r3, [pc, #472]	@ (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a75      	ldr	r2, [pc, #468]	@ (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001c72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	e02e      	b.n	8001cd8 <HAL_RCC_OscConfig+0xd4>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10c      	bne.n	8001c9c <HAL_RCC_OscConfig+0x98>
 8001c82:	4b71      	ldr	r3, [pc, #452]	@ (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a70      	ldr	r2, [pc, #448]	@ (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001c88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	4b6e      	ldr	r3, [pc, #440]	@ (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a6d      	ldr	r2, [pc, #436]	@ (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001c94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	e01d      	b.n	8001cd8 <HAL_RCC_OscConfig+0xd4>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ca4:	d10c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0xbc>
 8001ca6:	4b68      	ldr	r3, [pc, #416]	@ (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a67      	ldr	r2, [pc, #412]	@ (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001cac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	4b65      	ldr	r3, [pc, #404]	@ (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a64      	ldr	r2, [pc, #400]	@ (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001cb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	e00b      	b.n	8001cd8 <HAL_RCC_OscConfig+0xd4>
 8001cc0:	4b61      	ldr	r3, [pc, #388]	@ (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a60      	ldr	r2, [pc, #384]	@ (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001cc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	4b5e      	ldr	r3, [pc, #376]	@ (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a5d      	ldr	r2, [pc, #372]	@ (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001cd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d013      	beq.n	8001d08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce0:	f7ff fdc6 	bl	8001870 <HAL_GetTick>
 8001ce4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce8:	f7ff fdc2 	bl	8001870 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	@ 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e356      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cfa:	4b53      	ldr	r3, [pc, #332]	@ (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0xe4>
 8001d06:	e014      	b.n	8001d32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d08:	f7ff fdb2 	bl	8001870 <HAL_GetTick>
 8001d0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d10:	f7ff fdae 	bl	8001870 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	@ 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e342      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d22:	4b49      	ldr	r3, [pc, #292]	@ (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x10c>
 8001d2e:	e000      	b.n	8001d32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 808c 	beq.w	8001e58 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d40:	4b41      	ldr	r3, [pc, #260]	@ (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d48:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d4a:	4b3f      	ldr	r3, [pc, #252]	@ (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d4e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001d50:	6a3b      	ldr	r3, [r7, #32]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d007      	beq.n	8001d66 <HAL_RCC_OscConfig+0x162>
 8001d56:	6a3b      	ldr	r3, [r7, #32]
 8001d58:	2b18      	cmp	r3, #24
 8001d5a:	d137      	bne.n	8001dcc <HAL_RCC_OscConfig+0x1c8>
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d132      	bne.n	8001dcc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d66:	4b38      	ldr	r3, [pc, #224]	@ (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d005      	beq.n	8001d7e <HAL_RCC_OscConfig+0x17a>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e314      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d7e:	4b32      	ldr	r3, [pc, #200]	@ (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 0219 	bic.w	r2, r3, #25
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	492f      	ldr	r1, [pc, #188]	@ (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d90:	f7ff fd6e 	bl	8001870 <HAL_GetTick>
 8001d94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d98:	f7ff fd6a 	bl	8001870 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e2fe      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001daa:	4b27      	ldr	r3, [pc, #156]	@ (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0304 	and.w	r3, r3, #4
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db6:	4b24      	ldr	r3, [pc, #144]	@ (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	061b      	lsls	r3, r3, #24
 8001dc4:	4920      	ldr	r1, [pc, #128]	@ (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dca:	e045      	b.n	8001e58 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d026      	beq.n	8001e22 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001dd4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f023 0219 	bic.w	r2, r3, #25
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	4919      	ldr	r1, [pc, #100]	@ (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de6:	f7ff fd43 	bl	8001870 <HAL_GetTick>
 8001dea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dee:	f7ff fd3f 	bl	8001870 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e2d3      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e00:	4b11      	ldr	r3, [pc, #68]	@ (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0f0      	beq.n	8001dee <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	061b      	lsls	r3, r3, #24
 8001e1a:	490b      	ldr	r1, [pc, #44]	@ (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	604b      	str	r3, [r1, #4]
 8001e20:	e01a      	b.n	8001e58 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e22:	4b09      	ldr	r3, [pc, #36]	@ (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a08      	ldr	r2, [pc, #32]	@ (8001e48 <HAL_RCC_OscConfig+0x244>)
 8001e28:	f023 0301 	bic.w	r3, r3, #1
 8001e2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2e:	f7ff fd1f 	bl	8001870 <HAL_GetTick>
 8001e32:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e34:	e00a      	b.n	8001e4c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e36:	f7ff fd1b 	bl	8001870 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d903      	bls.n	8001e4c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e2af      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a4>
 8001e48:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e4c:	4b96      	ldr	r3, [pc, #600]	@ (80020a8 <HAL_RCC_OscConfig+0x4a4>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1ee      	bne.n	8001e36 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0310 	and.w	r3, r3, #16
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d06a      	beq.n	8001f3a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e64:	4b90      	ldr	r3, [pc, #576]	@ (80020a8 <HAL_RCC_OscConfig+0x4a4>)
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e6c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e6e:	4b8e      	ldr	r3, [pc, #568]	@ (80020a8 <HAL_RCC_OscConfig+0x4a4>)
 8001e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e72:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d007      	beq.n	8001e8a <HAL_RCC_OscConfig+0x286>
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	2b18      	cmp	r3, #24
 8001e7e:	d11b      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x2b4>
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d116      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e8a:	4b87      	ldr	r3, [pc, #540]	@ (80020a8 <HAL_RCC_OscConfig+0x4a4>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d005      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x29e>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	2b80      	cmp	r3, #128	@ 0x80
 8001e9c:	d001      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e282      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ea2:	4b81      	ldr	r3, [pc, #516]	@ (80020a8 <HAL_RCC_OscConfig+0x4a4>)
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	061b      	lsls	r3, r3, #24
 8001eb0:	497d      	ldr	r1, [pc, #500]	@ (80020a8 <HAL_RCC_OscConfig+0x4a4>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001eb6:	e040      	b.n	8001f3a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69db      	ldr	r3, [r3, #28]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d023      	beq.n	8001f08 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001ec0:	4b79      	ldr	r3, [pc, #484]	@ (80020a8 <HAL_RCC_OscConfig+0x4a4>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a78      	ldr	r2, [pc, #480]	@ (80020a8 <HAL_RCC_OscConfig+0x4a4>)
 8001ec6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001eca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ecc:	f7ff fcd0 	bl	8001870 <HAL_GetTick>
 8001ed0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001ed4:	f7ff fccc 	bl	8001870 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e260      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ee6:	4b70      	ldr	r3, [pc, #448]	@ (80020a8 <HAL_RCC_OscConfig+0x4a4>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0f0      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ef2:	4b6d      	ldr	r3, [pc, #436]	@ (80020a8 <HAL_RCC_OscConfig+0x4a4>)
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	061b      	lsls	r3, r3, #24
 8001f00:	4969      	ldr	r1, [pc, #420]	@ (80020a8 <HAL_RCC_OscConfig+0x4a4>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	60cb      	str	r3, [r1, #12]
 8001f06:	e018      	b.n	8001f3a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001f08:	4b67      	ldr	r3, [pc, #412]	@ (80020a8 <HAL_RCC_OscConfig+0x4a4>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a66      	ldr	r2, [pc, #408]	@ (80020a8 <HAL_RCC_OscConfig+0x4a4>)
 8001f0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f14:	f7ff fcac 	bl	8001870 <HAL_GetTick>
 8001f18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001f1c:	f7ff fca8 	bl	8001870 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e23c      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001f2e:	4b5e      	ldr	r3, [pc, #376]	@ (80020a8 <HAL_RCC_OscConfig+0x4a4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d036      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d019      	beq.n	8001f82 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f4e:	4b56      	ldr	r3, [pc, #344]	@ (80020a8 <HAL_RCC_OscConfig+0x4a4>)
 8001f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f52:	4a55      	ldr	r2, [pc, #340]	@ (80020a8 <HAL_RCC_OscConfig+0x4a4>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5a:	f7ff fc89 	bl	8001870 <HAL_GetTick>
 8001f5e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f62:	f7ff fc85 	bl	8001870 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e219      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f74:	4b4c      	ldr	r3, [pc, #304]	@ (80020a8 <HAL_RCC_OscConfig+0x4a4>)
 8001f76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0f0      	beq.n	8001f62 <HAL_RCC_OscConfig+0x35e>
 8001f80:	e018      	b.n	8001fb4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f82:	4b49      	ldr	r3, [pc, #292]	@ (80020a8 <HAL_RCC_OscConfig+0x4a4>)
 8001f84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f86:	4a48      	ldr	r2, [pc, #288]	@ (80020a8 <HAL_RCC_OscConfig+0x4a4>)
 8001f88:	f023 0301 	bic.w	r3, r3, #1
 8001f8c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8e:	f7ff fc6f 	bl	8001870 <HAL_GetTick>
 8001f92:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f96:	f7ff fc6b 	bl	8001870 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e1ff      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001fa8:	4b3f      	ldr	r3, [pc, #252]	@ (80020a8 <HAL_RCC_OscConfig+0x4a4>)
 8001faa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1f0      	bne.n	8001f96 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0320 	and.w	r3, r3, #32
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d036      	beq.n	800202e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d019      	beq.n	8001ffc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fc8:	4b37      	ldr	r3, [pc, #220]	@ (80020a8 <HAL_RCC_OscConfig+0x4a4>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a36      	ldr	r2, [pc, #216]	@ (80020a8 <HAL_RCC_OscConfig+0x4a4>)
 8001fce:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001fd2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001fd4:	f7ff fc4c 	bl	8001870 <HAL_GetTick>
 8001fd8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fdc:	f7ff fc48 	bl	8001870 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e1dc      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001fee:	4b2e      	ldr	r3, [pc, #184]	@ (80020a8 <HAL_RCC_OscConfig+0x4a4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0f0      	beq.n	8001fdc <HAL_RCC_OscConfig+0x3d8>
 8001ffa:	e018      	b.n	800202e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ffc:	4b2a      	ldr	r3, [pc, #168]	@ (80020a8 <HAL_RCC_OscConfig+0x4a4>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a29      	ldr	r2, [pc, #164]	@ (80020a8 <HAL_RCC_OscConfig+0x4a4>)
 8002002:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002006:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002008:	f7ff fc32 	bl	8001870 <HAL_GetTick>
 800200c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002010:	f7ff fc2e 	bl	8001870 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e1c2      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002022:	4b21      	ldr	r3, [pc, #132]	@ (80020a8 <HAL_RCC_OscConfig+0x4a4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0304 	and.w	r3, r3, #4
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 8086 	beq.w	8002148 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800203c:	4b1b      	ldr	r3, [pc, #108]	@ (80020ac <HAL_RCC_OscConfig+0x4a8>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a1a      	ldr	r2, [pc, #104]	@ (80020ac <HAL_RCC_OscConfig+0x4a8>)
 8002042:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002046:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002048:	f7ff fc12 	bl	8001870 <HAL_GetTick>
 800204c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002050:	f7ff fc0e 	bl	8001870 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b64      	cmp	r3, #100	@ 0x64
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e1a2      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002062:	4b12      	ldr	r3, [pc, #72]	@ (80020ac <HAL_RCC_OscConfig+0x4a8>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0f0      	beq.n	8002050 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d106      	bne.n	8002084 <HAL_RCC_OscConfig+0x480>
 8002076:	4b0c      	ldr	r3, [pc, #48]	@ (80020a8 <HAL_RCC_OscConfig+0x4a4>)
 8002078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800207a:	4a0b      	ldr	r2, [pc, #44]	@ (80020a8 <HAL_RCC_OscConfig+0x4a4>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	6713      	str	r3, [r2, #112]	@ 0x70
 8002082:	e032      	b.n	80020ea <HAL_RCC_OscConfig+0x4e6>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d111      	bne.n	80020b0 <HAL_RCC_OscConfig+0x4ac>
 800208c:	4b06      	ldr	r3, [pc, #24]	@ (80020a8 <HAL_RCC_OscConfig+0x4a4>)
 800208e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002090:	4a05      	ldr	r2, [pc, #20]	@ (80020a8 <HAL_RCC_OscConfig+0x4a4>)
 8002092:	f023 0301 	bic.w	r3, r3, #1
 8002096:	6713      	str	r3, [r2, #112]	@ 0x70
 8002098:	4b03      	ldr	r3, [pc, #12]	@ (80020a8 <HAL_RCC_OscConfig+0x4a4>)
 800209a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800209c:	4a02      	ldr	r2, [pc, #8]	@ (80020a8 <HAL_RCC_OscConfig+0x4a4>)
 800209e:	f023 0304 	bic.w	r3, r3, #4
 80020a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80020a4:	e021      	b.n	80020ea <HAL_RCC_OscConfig+0x4e6>
 80020a6:	bf00      	nop
 80020a8:	58024400 	.word	0x58024400
 80020ac:	58024800 	.word	0x58024800
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	2b05      	cmp	r3, #5
 80020b6:	d10c      	bne.n	80020d2 <HAL_RCC_OscConfig+0x4ce>
 80020b8:	4b83      	ldr	r3, [pc, #524]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 80020ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020bc:	4a82      	ldr	r2, [pc, #520]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 80020be:	f043 0304 	orr.w	r3, r3, #4
 80020c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80020c4:	4b80      	ldr	r3, [pc, #512]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 80020c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020c8:	4a7f      	ldr	r2, [pc, #508]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80020d0:	e00b      	b.n	80020ea <HAL_RCC_OscConfig+0x4e6>
 80020d2:	4b7d      	ldr	r3, [pc, #500]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 80020d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020d6:	4a7c      	ldr	r2, [pc, #496]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 80020d8:	f023 0301 	bic.w	r3, r3, #1
 80020dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80020de:	4b7a      	ldr	r3, [pc, #488]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 80020e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020e2:	4a79      	ldr	r2, [pc, #484]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 80020e4:	f023 0304 	bic.w	r3, r3, #4
 80020e8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d015      	beq.n	800211e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f2:	f7ff fbbd 	bl	8001870 <HAL_GetTick>
 80020f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020f8:	e00a      	b.n	8002110 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fa:	f7ff fbb9 	bl	8001870 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002108:	4293      	cmp	r3, r2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e14b      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002110:	4b6d      	ldr	r3, [pc, #436]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 8002112:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0ee      	beq.n	80020fa <HAL_RCC_OscConfig+0x4f6>
 800211c:	e014      	b.n	8002148 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211e:	f7ff fba7 	bl	8001870 <HAL_GetTick>
 8002122:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002124:	e00a      	b.n	800213c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002126:	f7ff fba3 	bl	8001870 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002134:	4293      	cmp	r3, r2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e135      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800213c:	4b62      	ldr	r3, [pc, #392]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 800213e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1ee      	bne.n	8002126 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 812a 	beq.w	80023a6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002152:	4b5d      	ldr	r3, [pc, #372]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800215a:	2b18      	cmp	r3, #24
 800215c:	f000 80ba 	beq.w	80022d4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002164:	2b02      	cmp	r3, #2
 8002166:	f040 8095 	bne.w	8002294 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800216a:	4b57      	ldr	r3, [pc, #348]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a56      	ldr	r2, [pc, #344]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 8002170:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002174:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002176:	f7ff fb7b 	bl	8001870 <HAL_GetTick>
 800217a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800217e:	f7ff fb77 	bl	8001870 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e10b      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002190:	4b4d      	ldr	r3, [pc, #308]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1f0      	bne.n	800217e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800219c:	4b4a      	ldr	r3, [pc, #296]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 800219e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021a0:	4b4a      	ldr	r3, [pc, #296]	@ (80022cc <HAL_RCC_OscConfig+0x6c8>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80021ac:	0112      	lsls	r2, r2, #4
 80021ae:	430a      	orrs	r2, r1
 80021b0:	4945      	ldr	r1, [pc, #276]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	628b      	str	r3, [r1, #40]	@ 0x28
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ba:	3b01      	subs	r3, #1
 80021bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021c4:	3b01      	subs	r3, #1
 80021c6:	025b      	lsls	r3, r3, #9
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d0:	3b01      	subs	r3, #1
 80021d2:	041b      	lsls	r3, r3, #16
 80021d4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80021d8:	431a      	orrs	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021de:	3b01      	subs	r3, #1
 80021e0:	061b      	lsls	r3, r3, #24
 80021e2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80021e6:	4938      	ldr	r1, [pc, #224]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80021ec:	4b36      	ldr	r3, [pc, #216]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 80021ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f0:	4a35      	ldr	r2, [pc, #212]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 80021f2:	f023 0301 	bic.w	r3, r3, #1
 80021f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80021f8:	4b33      	ldr	r3, [pc, #204]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 80021fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021fc:	4b34      	ldr	r3, [pc, #208]	@ (80022d0 <HAL_RCC_OscConfig+0x6cc>)
 80021fe:	4013      	ands	r3, r2
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002204:	00d2      	lsls	r2, r2, #3
 8002206:	4930      	ldr	r1, [pc, #192]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 8002208:	4313      	orrs	r3, r2
 800220a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800220c:	4b2e      	ldr	r3, [pc, #184]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 800220e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002210:	f023 020c 	bic.w	r2, r3, #12
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002218:	492b      	ldr	r1, [pc, #172]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 800221a:	4313      	orrs	r3, r2
 800221c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800221e:	4b2a      	ldr	r3, [pc, #168]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 8002220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002222:	f023 0202 	bic.w	r2, r3, #2
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222a:	4927      	ldr	r1, [pc, #156]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 800222c:	4313      	orrs	r3, r2
 800222e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002230:	4b25      	ldr	r3, [pc, #148]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 8002232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002234:	4a24      	ldr	r2, [pc, #144]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 8002236:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800223a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800223c:	4b22      	ldr	r3, [pc, #136]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 800223e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002240:	4a21      	ldr	r2, [pc, #132]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 8002242:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002246:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002248:	4b1f      	ldr	r3, [pc, #124]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 800224a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224c:	4a1e      	ldr	r2, [pc, #120]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 800224e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002252:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002254:	4b1c      	ldr	r3, [pc, #112]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 8002256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002258:	4a1b      	ldr	r2, [pc, #108]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002260:	4b19      	ldr	r3, [pc, #100]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a18      	ldr	r2, [pc, #96]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 8002266:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800226a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226c:	f7ff fb00 	bl	8001870 <HAL_GetTick>
 8002270:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002274:	f7ff fafc 	bl	8001870 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e090      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002286:	4b10      	ldr	r3, [pc, #64]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f0      	beq.n	8002274 <HAL_RCC_OscConfig+0x670>
 8002292:	e088      	b.n	80023a6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002294:	4b0c      	ldr	r3, [pc, #48]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a0b      	ldr	r2, [pc, #44]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 800229a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800229e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a0:	f7ff fae6 	bl	8001870 <HAL_GetTick>
 80022a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a8:	f7ff fae2 	bl	8001870 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e076      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022ba:	4b03      	ldr	r3, [pc, #12]	@ (80022c8 <HAL_RCC_OscConfig+0x6c4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x6a4>
 80022c6:	e06e      	b.n	80023a6 <HAL_RCC_OscConfig+0x7a2>
 80022c8:	58024400 	.word	0x58024400
 80022cc:	fffffc0c 	.word	0xfffffc0c
 80022d0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80022d4:	4b36      	ldr	r3, [pc, #216]	@ (80023b0 <HAL_RCC_OscConfig+0x7ac>)
 80022d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80022da:	4b35      	ldr	r3, [pc, #212]	@ (80023b0 <HAL_RCC_OscConfig+0x7ac>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022de:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d031      	beq.n	800234c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	f003 0203 	and.w	r2, r3, #3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d12a      	bne.n	800234c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	091b      	lsrs	r3, r3, #4
 80022fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002302:	429a      	cmp	r2, r3
 8002304:	d122      	bne.n	800234c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002310:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002312:	429a      	cmp	r2, r3
 8002314:	d11a      	bne.n	800234c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	0a5b      	lsrs	r3, r3, #9
 800231a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002322:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002324:	429a      	cmp	r2, r3
 8002326:	d111      	bne.n	800234c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	0c1b      	lsrs	r3, r3, #16
 800232c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002334:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002336:	429a      	cmp	r2, r3
 8002338:	d108      	bne.n	800234c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	0e1b      	lsrs	r3, r3, #24
 800233e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002346:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002348:	429a      	cmp	r2, r3
 800234a:	d001      	beq.n	8002350 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e02b      	b.n	80023a8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002350:	4b17      	ldr	r3, [pc, #92]	@ (80023b0 <HAL_RCC_OscConfig+0x7ac>)
 8002352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002354:	08db      	lsrs	r3, r3, #3
 8002356:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800235a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	429a      	cmp	r2, r3
 8002364:	d01f      	beq.n	80023a6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002366:	4b12      	ldr	r3, [pc, #72]	@ (80023b0 <HAL_RCC_OscConfig+0x7ac>)
 8002368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800236a:	4a11      	ldr	r2, [pc, #68]	@ (80023b0 <HAL_RCC_OscConfig+0x7ac>)
 800236c:	f023 0301 	bic.w	r3, r3, #1
 8002370:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002372:	f7ff fa7d 	bl	8001870 <HAL_GetTick>
 8002376:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002378:	bf00      	nop
 800237a:	f7ff fa79 	bl	8001870 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002382:	4293      	cmp	r3, r2
 8002384:	d0f9      	beq.n	800237a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002386:	4b0a      	ldr	r3, [pc, #40]	@ (80023b0 <HAL_RCC_OscConfig+0x7ac>)
 8002388:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800238a:	4b0a      	ldr	r3, [pc, #40]	@ (80023b4 <HAL_RCC_OscConfig+0x7b0>)
 800238c:	4013      	ands	r3, r2
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002392:	00d2      	lsls	r2, r2, #3
 8002394:	4906      	ldr	r1, [pc, #24]	@ (80023b0 <HAL_RCC_OscConfig+0x7ac>)
 8002396:	4313      	orrs	r3, r2
 8002398:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800239a:	4b05      	ldr	r3, [pc, #20]	@ (80023b0 <HAL_RCC_OscConfig+0x7ac>)
 800239c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239e:	4a04      	ldr	r2, [pc, #16]	@ (80023b0 <HAL_RCC_OscConfig+0x7ac>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3730      	adds	r7, #48	@ 0x30
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	58024400 	.word	0x58024400
 80023b4:	ffff0007 	.word	0xffff0007

080023b8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e19c      	b.n	8002706 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023cc:	4b8a      	ldr	r3, [pc, #552]	@ (80025f8 <HAL_RCC_ClockConfig+0x240>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 030f 	and.w	r3, r3, #15
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d910      	bls.n	80023fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023da:	4b87      	ldr	r3, [pc, #540]	@ (80025f8 <HAL_RCC_ClockConfig+0x240>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f023 020f 	bic.w	r2, r3, #15
 80023e2:	4985      	ldr	r1, [pc, #532]	@ (80025f8 <HAL_RCC_ClockConfig+0x240>)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ea:	4b83      	ldr	r3, [pc, #524]	@ (80025f8 <HAL_RCC_ClockConfig+0x240>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d001      	beq.n	80023fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e184      	b.n	8002706 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b00      	cmp	r3, #0
 8002406:	d010      	beq.n	800242a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691a      	ldr	r2, [r3, #16]
 800240c:	4b7b      	ldr	r3, [pc, #492]	@ (80025fc <HAL_RCC_ClockConfig+0x244>)
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002414:	429a      	cmp	r2, r3
 8002416:	d908      	bls.n	800242a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002418:	4b78      	ldr	r3, [pc, #480]	@ (80025fc <HAL_RCC_ClockConfig+0x244>)
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	4975      	ldr	r1, [pc, #468]	@ (80025fc <HAL_RCC_ClockConfig+0x244>)
 8002426:	4313      	orrs	r3, r2
 8002428:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	2b00      	cmp	r3, #0
 8002434:	d010      	beq.n	8002458 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	695a      	ldr	r2, [r3, #20]
 800243a:	4b70      	ldr	r3, [pc, #448]	@ (80025fc <HAL_RCC_ClockConfig+0x244>)
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002442:	429a      	cmp	r2, r3
 8002444:	d908      	bls.n	8002458 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002446:	4b6d      	ldr	r3, [pc, #436]	@ (80025fc <HAL_RCC_ClockConfig+0x244>)
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	496a      	ldr	r1, [pc, #424]	@ (80025fc <HAL_RCC_ClockConfig+0x244>)
 8002454:	4313      	orrs	r3, r2
 8002456:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0310 	and.w	r3, r3, #16
 8002460:	2b00      	cmp	r3, #0
 8002462:	d010      	beq.n	8002486 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	699a      	ldr	r2, [r3, #24]
 8002468:	4b64      	ldr	r3, [pc, #400]	@ (80025fc <HAL_RCC_ClockConfig+0x244>)
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002470:	429a      	cmp	r2, r3
 8002472:	d908      	bls.n	8002486 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002474:	4b61      	ldr	r3, [pc, #388]	@ (80025fc <HAL_RCC_ClockConfig+0x244>)
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	495e      	ldr	r1, [pc, #376]	@ (80025fc <HAL_RCC_ClockConfig+0x244>)
 8002482:	4313      	orrs	r3, r2
 8002484:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0320 	and.w	r3, r3, #32
 800248e:	2b00      	cmp	r3, #0
 8002490:	d010      	beq.n	80024b4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69da      	ldr	r2, [r3, #28]
 8002496:	4b59      	ldr	r3, [pc, #356]	@ (80025fc <HAL_RCC_ClockConfig+0x244>)
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800249e:	429a      	cmp	r2, r3
 80024a0:	d908      	bls.n	80024b4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80024a2:	4b56      	ldr	r3, [pc, #344]	@ (80025fc <HAL_RCC_ClockConfig+0x244>)
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	4953      	ldr	r1, [pc, #332]	@ (80025fc <HAL_RCC_ClockConfig+0x244>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d010      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68da      	ldr	r2, [r3, #12]
 80024c4:	4b4d      	ldr	r3, [pc, #308]	@ (80025fc <HAL_RCC_ClockConfig+0x244>)
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	f003 030f 	and.w	r3, r3, #15
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d908      	bls.n	80024e2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d0:	4b4a      	ldr	r3, [pc, #296]	@ (80025fc <HAL_RCC_ClockConfig+0x244>)
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	f023 020f 	bic.w	r2, r3, #15
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	4947      	ldr	r1, [pc, #284]	@ (80025fc <HAL_RCC_ClockConfig+0x244>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d055      	beq.n	800259a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80024ee:	4b43      	ldr	r3, [pc, #268]	@ (80025fc <HAL_RCC_ClockConfig+0x244>)
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	4940      	ldr	r1, [pc, #256]	@ (80025fc <HAL_RCC_ClockConfig+0x244>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b02      	cmp	r3, #2
 8002506:	d107      	bne.n	8002518 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002508:	4b3c      	ldr	r3, [pc, #240]	@ (80025fc <HAL_RCC_ClockConfig+0x244>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d121      	bne.n	8002558 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e0f6      	b.n	8002706 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b03      	cmp	r3, #3
 800251e:	d107      	bne.n	8002530 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002520:	4b36      	ldr	r3, [pc, #216]	@ (80025fc <HAL_RCC_ClockConfig+0x244>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d115      	bne.n	8002558 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e0ea      	b.n	8002706 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d107      	bne.n	8002548 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002538:	4b30      	ldr	r3, [pc, #192]	@ (80025fc <HAL_RCC_ClockConfig+0x244>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002540:	2b00      	cmp	r3, #0
 8002542:	d109      	bne.n	8002558 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e0de      	b.n	8002706 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002548:	4b2c      	ldr	r3, [pc, #176]	@ (80025fc <HAL_RCC_ClockConfig+0x244>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e0d6      	b.n	8002706 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002558:	4b28      	ldr	r3, [pc, #160]	@ (80025fc <HAL_RCC_ClockConfig+0x244>)
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	f023 0207 	bic.w	r2, r3, #7
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	4925      	ldr	r1, [pc, #148]	@ (80025fc <HAL_RCC_ClockConfig+0x244>)
 8002566:	4313      	orrs	r3, r2
 8002568:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800256a:	f7ff f981 	bl	8001870 <HAL_GetTick>
 800256e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002570:	e00a      	b.n	8002588 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002572:	f7ff f97d 	bl	8001870 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002580:	4293      	cmp	r3, r2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e0be      	b.n	8002706 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002588:	4b1c      	ldr	r3, [pc, #112]	@ (80025fc <HAL_RCC_ClockConfig+0x244>)
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	429a      	cmp	r2, r3
 8002598:	d1eb      	bne.n	8002572 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d010      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	4b14      	ldr	r3, [pc, #80]	@ (80025fc <HAL_RCC_ClockConfig+0x244>)
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d208      	bcs.n	80025c8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025b6:	4b11      	ldr	r3, [pc, #68]	@ (80025fc <HAL_RCC_ClockConfig+0x244>)
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	f023 020f 	bic.w	r2, r3, #15
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	490e      	ldr	r1, [pc, #56]	@ (80025fc <HAL_RCC_ClockConfig+0x244>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025c8:	4b0b      	ldr	r3, [pc, #44]	@ (80025f8 <HAL_RCC_ClockConfig+0x240>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 030f 	and.w	r3, r3, #15
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d214      	bcs.n	8002600 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d6:	4b08      	ldr	r3, [pc, #32]	@ (80025f8 <HAL_RCC_ClockConfig+0x240>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f023 020f 	bic.w	r2, r3, #15
 80025de:	4906      	ldr	r1, [pc, #24]	@ (80025f8 <HAL_RCC_ClockConfig+0x240>)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e6:	4b04      	ldr	r3, [pc, #16]	@ (80025f8 <HAL_RCC_ClockConfig+0x240>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d005      	beq.n	8002600 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e086      	b.n	8002706 <HAL_RCC_ClockConfig+0x34e>
 80025f8:	52002000 	.word	0x52002000
 80025fc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b00      	cmp	r3, #0
 800260a:	d010      	beq.n	800262e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	4b3f      	ldr	r3, [pc, #252]	@ (8002710 <HAL_RCC_ClockConfig+0x358>)
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002618:	429a      	cmp	r2, r3
 800261a:	d208      	bcs.n	800262e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800261c:	4b3c      	ldr	r3, [pc, #240]	@ (8002710 <HAL_RCC_ClockConfig+0x358>)
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	4939      	ldr	r1, [pc, #228]	@ (8002710 <HAL_RCC_ClockConfig+0x358>)
 800262a:	4313      	orrs	r3, r2
 800262c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b00      	cmp	r3, #0
 8002638:	d010      	beq.n	800265c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	695a      	ldr	r2, [r3, #20]
 800263e:	4b34      	ldr	r3, [pc, #208]	@ (8002710 <HAL_RCC_ClockConfig+0x358>)
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002646:	429a      	cmp	r2, r3
 8002648:	d208      	bcs.n	800265c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800264a:	4b31      	ldr	r3, [pc, #196]	@ (8002710 <HAL_RCC_ClockConfig+0x358>)
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	492e      	ldr	r1, [pc, #184]	@ (8002710 <HAL_RCC_ClockConfig+0x358>)
 8002658:	4313      	orrs	r3, r2
 800265a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0310 	and.w	r3, r3, #16
 8002664:	2b00      	cmp	r3, #0
 8002666:	d010      	beq.n	800268a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	699a      	ldr	r2, [r3, #24]
 800266c:	4b28      	ldr	r3, [pc, #160]	@ (8002710 <HAL_RCC_ClockConfig+0x358>)
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002674:	429a      	cmp	r2, r3
 8002676:	d208      	bcs.n	800268a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002678:	4b25      	ldr	r3, [pc, #148]	@ (8002710 <HAL_RCC_ClockConfig+0x358>)
 800267a:	69db      	ldr	r3, [r3, #28]
 800267c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	4922      	ldr	r1, [pc, #136]	@ (8002710 <HAL_RCC_ClockConfig+0x358>)
 8002686:	4313      	orrs	r3, r2
 8002688:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0320 	and.w	r3, r3, #32
 8002692:	2b00      	cmp	r3, #0
 8002694:	d010      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69da      	ldr	r2, [r3, #28]
 800269a:	4b1d      	ldr	r3, [pc, #116]	@ (8002710 <HAL_RCC_ClockConfig+0x358>)
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d208      	bcs.n	80026b8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80026a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002710 <HAL_RCC_ClockConfig+0x358>)
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	4917      	ldr	r1, [pc, #92]	@ (8002710 <HAL_RCC_ClockConfig+0x358>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80026b8:	f000 f834 	bl	8002724 <HAL_RCC_GetSysClockFreq>
 80026bc:	4602      	mov	r2, r0
 80026be:	4b14      	ldr	r3, [pc, #80]	@ (8002710 <HAL_RCC_ClockConfig+0x358>)
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	0a1b      	lsrs	r3, r3, #8
 80026c4:	f003 030f 	and.w	r3, r3, #15
 80026c8:	4912      	ldr	r1, [pc, #72]	@ (8002714 <HAL_RCC_ClockConfig+0x35c>)
 80026ca:	5ccb      	ldrb	r3, [r1, r3]
 80026cc:	f003 031f 	and.w	r3, r3, #31
 80026d0:	fa22 f303 	lsr.w	r3, r2, r3
 80026d4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002710 <HAL_RCC_ClockConfig+0x358>)
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	4a0d      	ldr	r2, [pc, #52]	@ (8002714 <HAL_RCC_ClockConfig+0x35c>)
 80026e0:	5cd3      	ldrb	r3, [r2, r3]
 80026e2:	f003 031f 	and.w	r3, r3, #31
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	fa22 f303 	lsr.w	r3, r2, r3
 80026ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002718 <HAL_RCC_ClockConfig+0x360>)
 80026ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026f0:	4a0a      	ldr	r2, [pc, #40]	@ (800271c <HAL_RCC_ClockConfig+0x364>)
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80026f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002720 <HAL_RCC_ClockConfig+0x368>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff f86e 	bl	80017dc <HAL_InitTick>
 8002700:	4603      	mov	r3, r0
 8002702:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002704:	7bfb      	ldrb	r3, [r7, #15]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	58024400 	.word	0x58024400
 8002714:	08003064 	.word	0x08003064
 8002718:	24008008 	.word	0x24008008
 800271c:	24008004 	.word	0x24008004
 8002720:	2400800c 	.word	0x2400800c

08002724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002724:	b480      	push	{r7}
 8002726:	b089      	sub	sp, #36	@ 0x24
 8002728:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800272a:	4bb3      	ldr	r3, [pc, #716]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002732:	2b18      	cmp	r3, #24
 8002734:	f200 8155 	bhi.w	80029e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002738:	a201      	add	r2, pc, #4	@ (adr r2, 8002740 <HAL_RCC_GetSysClockFreq+0x1c>)
 800273a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800273e:	bf00      	nop
 8002740:	080027a5 	.word	0x080027a5
 8002744:	080029e3 	.word	0x080029e3
 8002748:	080029e3 	.word	0x080029e3
 800274c:	080029e3 	.word	0x080029e3
 8002750:	080029e3 	.word	0x080029e3
 8002754:	080029e3 	.word	0x080029e3
 8002758:	080029e3 	.word	0x080029e3
 800275c:	080029e3 	.word	0x080029e3
 8002760:	080027cb 	.word	0x080027cb
 8002764:	080029e3 	.word	0x080029e3
 8002768:	080029e3 	.word	0x080029e3
 800276c:	080029e3 	.word	0x080029e3
 8002770:	080029e3 	.word	0x080029e3
 8002774:	080029e3 	.word	0x080029e3
 8002778:	080029e3 	.word	0x080029e3
 800277c:	080029e3 	.word	0x080029e3
 8002780:	080027d1 	.word	0x080027d1
 8002784:	080029e3 	.word	0x080029e3
 8002788:	080029e3 	.word	0x080029e3
 800278c:	080029e3 	.word	0x080029e3
 8002790:	080029e3 	.word	0x080029e3
 8002794:	080029e3 	.word	0x080029e3
 8002798:	080029e3 	.word	0x080029e3
 800279c:	080029e3 	.word	0x080029e3
 80027a0:	080027d7 	.word	0x080027d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027a4:	4b94      	ldr	r3, [pc, #592]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0320 	and.w	r3, r3, #32
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d009      	beq.n	80027c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80027b0:	4b91      	ldr	r3, [pc, #580]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	08db      	lsrs	r3, r3, #3
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	4a90      	ldr	r2, [pc, #576]	@ (80029fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80027bc:	fa22 f303 	lsr.w	r3, r2, r3
 80027c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80027c2:	e111      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80027c4:	4b8d      	ldr	r3, [pc, #564]	@ (80029fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80027c6:	61bb      	str	r3, [r7, #24]
      break;
 80027c8:	e10e      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80027ca:	4b8d      	ldr	r3, [pc, #564]	@ (8002a00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80027cc:	61bb      	str	r3, [r7, #24]
      break;
 80027ce:	e10b      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80027d0:	4b8c      	ldr	r3, [pc, #560]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80027d2:	61bb      	str	r3, [r7, #24]
      break;
 80027d4:	e108      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80027d6:	4b88      	ldr	r3, [pc, #544]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80027e0:	4b85      	ldr	r3, [pc, #532]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e4:	091b      	lsrs	r3, r3, #4
 80027e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027ea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80027ec:	4b82      	ldr	r3, [pc, #520]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80027f6:	4b80      	ldr	r3, [pc, #512]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027fa:	08db      	lsrs	r3, r3, #3
 80027fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	fb02 f303 	mul.w	r3, r2, r3
 8002806:	ee07 3a90 	vmov	s15, r3
 800280a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800280e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 80e1 	beq.w	80029dc <HAL_RCC_GetSysClockFreq+0x2b8>
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2b02      	cmp	r3, #2
 800281e:	f000 8083 	beq.w	8002928 <HAL_RCC_GetSysClockFreq+0x204>
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	2b02      	cmp	r3, #2
 8002826:	f200 80a1 	bhi.w	800296c <HAL_RCC_GetSysClockFreq+0x248>
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_RCC_GetSysClockFreq+0x114>
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d056      	beq.n	80028e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002836:	e099      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002838:	4b6f      	ldr	r3, [pc, #444]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0320 	and.w	r3, r3, #32
 8002840:	2b00      	cmp	r3, #0
 8002842:	d02d      	beq.n	80028a0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002844:	4b6c      	ldr	r3, [pc, #432]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	08db      	lsrs	r3, r3, #3
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	4a6b      	ldr	r2, [pc, #428]	@ (80029fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002850:	fa22 f303 	lsr.w	r3, r2, r3
 8002854:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	ee07 3a90 	vmov	s15, r3
 800285c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	ee07 3a90 	vmov	s15, r3
 8002866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800286a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800286e:	4b62      	ldr	r3, [pc, #392]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002876:	ee07 3a90 	vmov	s15, r3
 800287a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800287e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002882:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002a08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800288a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800288e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800289a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800289e:	e087      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	ee07 3a90 	vmov	s15, r3
 80028a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028aa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002a0c <HAL_RCC_GetSysClockFreq+0x2e8>
 80028ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028b2:	4b51      	ldr	r3, [pc, #324]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ba:	ee07 3a90 	vmov	s15, r3
 80028be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80028c6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002a08 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80028e2:	e065      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	ee07 3a90 	vmov	s15, r3
 80028ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028ee:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002a10 <HAL_RCC_GetSysClockFreq+0x2ec>
 80028f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028f6:	4b40      	ldr	r3, [pc, #256]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028fe:	ee07 3a90 	vmov	s15, r3
 8002902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002906:	ed97 6a02 	vldr	s12, [r7, #8]
 800290a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002a08 <HAL_RCC_GetSysClockFreq+0x2e4>
 800290e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002916:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800291a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800291e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002922:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002926:	e043      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	ee07 3a90 	vmov	s15, r3
 800292e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002932:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002a14 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800293a:	4b2f      	ldr	r3, [pc, #188]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002942:	ee07 3a90 	vmov	s15, r3
 8002946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800294a:	ed97 6a02 	vldr	s12, [r7, #8]
 800294e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002a08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800295a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800295e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002966:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800296a:	e021      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	ee07 3a90 	vmov	s15, r3
 8002972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002976:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002a10 <HAL_RCC_GetSysClockFreq+0x2ec>
 800297a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800297e:	4b1e      	ldr	r3, [pc, #120]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002986:	ee07 3a90 	vmov	s15, r3
 800298a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800298e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002992:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002a08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800299a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800299e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80029ae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80029b0:	4b11      	ldr	r3, [pc, #68]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b4:	0a5b      	lsrs	r3, r3, #9
 80029b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029ba:	3301      	adds	r3, #1
 80029bc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	ee07 3a90 	vmov	s15, r3
 80029c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80029cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029d4:	ee17 3a90 	vmov	r3, s15
 80029d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80029da:	e005      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80029dc:	2300      	movs	r3, #0
 80029de:	61bb      	str	r3, [r7, #24]
      break;
 80029e0:	e002      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80029e2:	4b07      	ldr	r3, [pc, #28]	@ (8002a00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80029e4:	61bb      	str	r3, [r7, #24]
      break;
 80029e6:	bf00      	nop
  }

  return sysclockfreq;
 80029e8:	69bb      	ldr	r3, [r7, #24]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3724      	adds	r7, #36	@ 0x24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	58024400 	.word	0x58024400
 80029fc:	03d09000 	.word	0x03d09000
 8002a00:	003d0900 	.word	0x003d0900
 8002a04:	017d7840 	.word	0x017d7840
 8002a08:	46000000 	.word	0x46000000
 8002a0c:	4c742400 	.word	0x4c742400
 8002a10:	4a742400 	.word	0x4a742400
 8002a14:	4bbebc20 	.word	0x4bbebc20

08002a18 <arm_mat_trans_f32>:
 8002a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a1c:	8802      	ldrh	r2, [r0, #0]
 8002a1e:	b085      	sub	sp, #20
 8002a20:	884b      	ldrh	r3, [r1, #2]
 8002a22:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8002a26:	4293      	cmp	r3, r2
 8002a28:	8844      	ldrh	r4, [r0, #2]
 8002a2a:	6848      	ldr	r0, [r1, #4]
 8002a2c:	d14e      	bne.n	8002acc <arm_mat_trans_f32+0xb4>
 8002a2e:	f8b1 8000 	ldrh.w	r8, [r1]
 8002a32:	45a0      	cmp	r8, r4
 8002a34:	d14a      	bne.n	8002acc <arm_mat_trans_f32+0xb4>
 8002a36:	ea4f 0998 	mov.w	r9, r8, lsr #2
 8002a3a:	f008 0803 	and.w	r8, r8, #3
 8002a3e:	009c      	lsls	r4, r3, #2
 8002a40:	4684      	mov	ip, r0
 8002a42:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8002a46:	fb09 f204 	mul.w	r2, r9, r4
 8002a4a:	011d      	lsls	r5, r3, #4
 8002a4c:	ea4f 1b09 	mov.w	fp, r9, lsl #4
 8002a50:	eb00 0a04 	add.w	sl, r0, r4
 8002a54:	0092      	lsls	r2, r2, #2
 8002a56:	9103      	str	r1, [sp, #12]
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	9202      	str	r2, [sp, #8]
 8002a5c:	9301      	str	r3, [sp, #4]
 8002a5e:	4663      	mov	r3, ip
 8002a60:	f1b9 0f00 	cmp.w	r9, #0
 8002a64:	d01d      	beq.n	8002aa2 <arm_mat_trans_f32+0x8a>
 8002a66:	9901      	ldr	r1, [sp, #4]
 8002a68:	f10e 0210 	add.w	r2, lr, #16
 8002a6c:	4648      	mov	r0, r9
 8002a6e:	4461      	add	r1, ip
 8002a70:	ed52 7a04 	vldr	s15, [r2, #-16]
 8002a74:	191f      	adds	r7, r3, r4
 8002a76:	190e      	adds	r6, r1, r4
 8002a78:	3801      	subs	r0, #1
 8002a7a:	edc3 7a00 	vstr	s15, [r3]
 8002a7e:	f102 0210 	add.w	r2, r2, #16
 8002a82:	ed52 7a07 	vldr	s15, [r2, #-28]	@ 0xffffffe4
 8002a86:	442b      	add	r3, r5
 8002a88:	edc7 7a00 	vstr	s15, [r7]
 8002a8c:	f852 7c18 	ldr.w	r7, [r2, #-24]
 8002a90:	600f      	str	r7, [r1, #0]
 8002a92:	4429      	add	r1, r5
 8002a94:	f852 7c14 	ldr.w	r7, [r2, #-20]
 8002a98:	6037      	str	r7, [r6, #0]
 8002a9a:	d1e9      	bne.n	8002a70 <arm_mat_trans_f32+0x58>
 8002a9c:	9b02      	ldr	r3, [sp, #8]
 8002a9e:	44de      	add	lr, fp
 8002aa0:	4463      	add	r3, ip
 8002aa2:	f1b8 0f00 	cmp.w	r8, #0
 8002aa6:	d009      	beq.n	8002abc <arm_mat_trans_f32+0xa4>
 8002aa8:	4642      	mov	r2, r8
 8002aaa:	4671      	mov	r1, lr
 8002aac:	f851 0b04 	ldr.w	r0, [r1], #4
 8002ab0:	3a01      	subs	r2, #1
 8002ab2:	6018      	str	r0, [r3, #0]
 8002ab4:	4423      	add	r3, r4
 8002ab6:	d1f9      	bne.n	8002aac <arm_mat_trans_f32+0x94>
 8002ab8:	9b03      	ldr	r3, [sp, #12]
 8002aba:	449e      	add	lr, r3
 8002abc:	f10c 0c04 	add.w	ip, ip, #4
 8002ac0:	45d4      	cmp	ip, sl
 8002ac2:	d1cc      	bne.n	8002a5e <arm_mat_trans_f32+0x46>
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	b005      	add	sp, #20
 8002ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002acc:	f06f 0002 	mvn.w	r0, #2
 8002ad0:	e7f9      	b.n	8002ac6 <arm_mat_trans_f32+0xae>
 8002ad2:	bf00      	nop

08002ad4 <arm_mat_mult_f32>:
 8002ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ad8:	8845      	ldrh	r5, [r0, #2]
 8002ada:	b08b      	sub	sp, #44	@ 0x2c
 8002adc:	880b      	ldrh	r3, [r1, #0]
 8002ade:	8806      	ldrh	r6, [r0, #0]
 8002ae0:	42ab      	cmp	r3, r5
 8002ae2:	9109      	str	r1, [sp, #36]	@ 0x24
 8002ae4:	6847      	ldr	r7, [r0, #4]
 8002ae6:	9604      	str	r6, [sp, #16]
 8002ae8:	6848      	ldr	r0, [r1, #4]
 8002aea:	6854      	ldr	r4, [r2, #4]
 8002aec:	8849      	ldrh	r1, [r1, #2]
 8002aee:	f040 808d 	bne.w	8002c0c <arm_mat_mult_f32+0x138>
 8002af2:	8815      	ldrh	r5, [r2, #0]
 8002af4:	42b5      	cmp	r5, r6
 8002af6:	f040 8089 	bne.w	8002c0c <arm_mat_mult_f32+0x138>
 8002afa:	8852      	ldrh	r2, [r2, #2]
 8002afc:	428a      	cmp	r2, r1
 8002afe:	f040 8085 	bne.w	8002c0c <arm_mat_mult_f32+0x138>
 8002b02:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8002b06:	1d01      	adds	r1, r0, #4
 8002b08:	0116      	lsls	r6, r2, #4
 8002b0a:	f003 0903 	and.w	r9, r3, #3
 8002b0e:	9108      	str	r1, [sp, #32]
 8002b10:	0095      	lsls	r5, r2, #2
 8002b12:	fb06 f108 	mul.w	r1, r6, r8
 8002b16:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	f107 0b10 	add.w	fp, r7, #16
 8002b20:	9103      	str	r1, [sp, #12]
 8002b22:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8002b26:	00d2      	lsls	r2, r2, #3
 8002b28:	eb04 0a05 	add.w	sl, r4, r5
 8002b2c:	9101      	str	r1, [sp, #4]
 8002b2e:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8002b32:	9202      	str	r2, [sp, #8]
 8002b34:	9107      	str	r1, [sp, #28]
 8002b36:	9306      	str	r3, [sp, #24]
 8002b38:	f1ab 0310 	sub.w	r3, fp, #16
 8002b3c:	f8dd e020 	ldr.w	lr, [sp, #32]
 8002b40:	9305      	str	r3, [sp, #20]
 8002b42:	9b07      	ldr	r3, [sp, #28]
 8002b44:	eb03 0c0a 	add.w	ip, r3, sl
 8002b48:	f1b8 0f00 	cmp.w	r8, #0
 8002b4c:	d056      	beq.n	8002bfc <arm_mat_mult_f32+0x128>
 8002b4e:	9b02      	ldr	r3, [sp, #8]
 8002b50:	4644      	mov	r4, r8
 8002b52:	4602      	mov	r2, r0
 8002b54:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8002c18 <arm_mat_mult_f32+0x144>
 8002b58:	18c1      	adds	r1, r0, r3
 8002b5a:	465b      	mov	r3, fp
 8002b5c:	edd2 6a00 	vldr	s13, [r2]
 8002b60:	1957      	adds	r7, r2, r5
 8002b62:	ed13 7a04 	vldr	s14, [r3, #-16]
 8002b66:	3c01      	subs	r4, #1
 8002b68:	ed53 5a03 	vldr	s11, [r3, #-12]
 8002b6c:	4432      	add	r2, r6
 8002b6e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002b72:	ed97 6a00 	vldr	s12, [r7]
 8002b76:	ed53 6a02 	vldr	s13, [r3, #-8]
 8002b7a:	eb01 0705 	add.w	r7, r1, r5
 8002b7e:	ee26 6a25 	vmul.f32	s12, s12, s11
 8002b82:	ed91 5a00 	vldr	s10, [r1]
 8002b86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b8a:	edd7 5a00 	vldr	s11, [r7]
 8002b8e:	ee26 7a85 	vmul.f32	s14, s13, s10
 8002b92:	ed53 6a01 	vldr	s13, [r3, #-4]
 8002b96:	4431      	add	r1, r6
 8002b98:	f103 0310 	add.w	r3, r3, #16
 8002b9c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002ba0:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8002ba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ba8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bac:	d1d6      	bne.n	8002b5c <arm_mat_mult_f32+0x88>
 8002bae:	9b03      	ldr	r3, [sp, #12]
 8002bb0:	9a01      	ldr	r2, [sp, #4]
 8002bb2:	4418      	add	r0, r3
 8002bb4:	f1b9 0f00 	cmp.w	r9, #0
 8002bb8:	d00b      	beq.n	8002bd2 <arm_mat_mult_f32+0xfe>
 8002bba:	464b      	mov	r3, r9
 8002bbc:	edd0 6a00 	vldr	s13, [r0]
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	ecb2 7a01 	vldmia	r2!, {s14}
 8002bc6:	4428      	add	r0, r5
 8002bc8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002bcc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bd0:	d1f4      	bne.n	8002bbc <arm_mat_mult_f32+0xe8>
 8002bd2:	ecec 7a01 	vstmia	ip!, {s15}
 8002bd6:	45d4      	cmp	ip, sl
 8002bd8:	4670      	mov	r0, lr
 8002bda:	f10e 0e04 	add.w	lr, lr, #4
 8002bde:	d1b3      	bne.n	8002b48 <arm_mat_mult_f32+0x74>
 8002be0:	9a01      	ldr	r2, [sp, #4]
 8002be2:	44aa      	add	sl, r5
 8002be4:	9b06      	ldr	r3, [sp, #24]
 8002be6:	4611      	mov	r1, r2
 8002be8:	449b      	add	fp, r3
 8002bea:	4419      	add	r1, r3
 8002bec:	9b04      	ldr	r3, [sp, #16]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	9101      	str	r1, [sp, #4]
 8002bf2:	9304      	str	r3, [sp, #16]
 8002bf4:	d006      	beq.n	8002c04 <arm_mat_mult_f32+0x130>
 8002bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002bf8:	6858      	ldr	r0, [r3, #4]
 8002bfa:	e79d      	b.n	8002b38 <arm_mat_mult_f32+0x64>
 8002bfc:	9a05      	ldr	r2, [sp, #20]
 8002bfe:	eddf 7a06 	vldr	s15, [pc, #24]	@ 8002c18 <arm_mat_mult_f32+0x144>
 8002c02:	e7d7      	b.n	8002bb4 <arm_mat_mult_f32+0xe0>
 8002c04:	4618      	mov	r0, r3
 8002c06:	b00b      	add	sp, #44	@ 0x2c
 8002c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c0c:	f06f 0002 	mvn.w	r0, #2
 8002c10:	b00b      	add	sp, #44	@ 0x2c
 8002c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c16:	bf00      	nop
 8002c18:	00000000 	.word	0x00000000

08002c1c <arm_mat_inverse_f32>:
 8002c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c20:	8843      	ldrh	r3, [r0, #2]
 8002c22:	b087      	sub	sp, #28
 8002c24:	8804      	ldrh	r4, [r0, #0]
 8002c26:	684d      	ldr	r5, [r1, #4]
 8002c28:	429c      	cmp	r4, r3
 8002c2a:	9301      	str	r3, [sp, #4]
 8002c2c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8002c30:	9503      	str	r5, [sp, #12]
 8002c32:	f040 80e2 	bne.w	8002dfa <arm_mat_inverse_f32+0x1de>
 8002c36:	880b      	ldrh	r3, [r1, #0]
 8002c38:	884a      	ldrh	r2, [r1, #2]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	f040 80dd 	bne.w	8002dfa <arm_mat_inverse_f32+0x1de>
 8002c40:	429c      	cmp	r4, r3
 8002c42:	f040 80da 	bne.w	8002dfa <arm_mat_inverse_f32+0x1de>
 8002c46:	9005      	str	r0, [sp, #20]
 8002c48:	b1fc      	cbz	r4, 8002c8a <arm_mat_inverse_f32+0x6e>
 8002c4a:	f04f 5b7e 	mov.w	fp, #1065353216	@ 0x3f800000
 8002c4e:	1e66      	subs	r6, r4, #1
 8002c50:	f845 bb04 	str.w	fp, [r5], #4
 8002c54:	d019      	beq.n	8002c8a <arm_mat_inverse_f32+0x6e>
 8002c56:	2701      	movs	r7, #1
 8002c58:	00b2      	lsls	r2, r6, #2
 8002c5a:	4628      	mov	r0, r5
 8002c5c:	ea4f 0887 	mov.w	r8, r7, lsl #2
 8002c60:	2100      	movs	r1, #0
 8002c62:	eb05 0a02 	add.w	sl, r5, r2
 8002c66:	f000 f9a5 	bl	8002fb4 <memset>
 8002c6a:	4642      	mov	r2, r8
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	eb0a 0508 	add.w	r5, sl, r8
 8002c72:	4650      	mov	r0, sl
 8002c74:	2f00      	cmp	r7, #0
 8002c76:	f000 80c5 	beq.w	8002e04 <arm_mat_inverse_f32+0x1e8>
 8002c7a:	f000 f99b 	bl	8002fb4 <memset>
 8002c7e:	3e01      	subs	r6, #1
 8002c80:	f107 0701 	add.w	r7, r7, #1
 8002c84:	f845 bb04 	str.w	fp, [r5], #4
 8002c88:	d1e6      	bne.n	8002c58 <arm_mat_inverse_f32+0x3c>
 8002c8a:	9b01      	ldr	r3, [sp, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 80af 	beq.w	8002df0 <arm_mat_inverse_f32+0x1d4>
 8002c92:	009d      	lsls	r5, r3, #2
 8002c94:	46cc      	mov	ip, r9
 8002c96:	469e      	mov	lr, r3
 8002c98:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8002c9c:	eb0c 0305 	add.w	r3, ip, r5
 8002ca0:	462f      	mov	r7, r5
 8002ca2:	2600      	movs	r6, #0
 8002ca4:	9302      	str	r3, [sp, #8]
 8002ca6:	1d2b      	adds	r3, r5, #4
 8002ca8:	9304      	str	r3, [sp, #16]
 8002caa:	9b02      	ldr	r3, [sp, #8]
 8002cac:	42b4      	cmp	r4, r6
 8002cae:	eddc 6a00 	vldr	s13, [ip]
 8002cb2:	eba3 0b07 	sub.w	fp, r3, r7
 8002cb6:	f000 809b 	beq.w	8002df0 <arm_mat_inverse_f32+0x1d4>
 8002cba:	4632      	mov	r2, r6
 8002cbc:	4663      	mov	r3, ip
 8002cbe:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8002e14 <arm_mat_inverse_f32+0x1f8>
 8002cc2:	e009      	b.n	8002cd8 <arm_mat_inverse_f32+0xbc>
 8002cc4:	eef4 7a47 	vcmp.f32	s15, s14
 8002cc8:	3201      	adds	r2, #1
 8002cca:	442b      	add	r3, r5
 8002ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd0:	fe37 7a87 	vselgt.f32	s14, s15, s14
 8002cd4:	42a2      	cmp	r2, r4
 8002cd6:	d012      	beq.n	8002cfe <arm_mat_inverse_f32+0xe2>
 8002cd8:	edd3 7a00 	vldr	s15, [r3]
 8002cdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ce0:	eeb1 6a67 	vneg.f32	s12, s15
 8002ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce8:	dcec      	bgt.n	8002cc4 <arm_mat_inverse_f32+0xa8>
 8002cea:	eeb4 6a47 	vcmp.f32	s12, s14
 8002cee:	3201      	adds	r2, #1
 8002cf0:	442b      	add	r3, r5
 8002cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf6:	fe36 7a07 	vselgt.f32	s14, s12, s14
 8002cfa:	42a2      	cmp	r2, r4
 8002cfc:	d1ec      	bne.n	8002cd8 <arm_mat_inverse_f32+0xbc>
 8002cfe:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8002d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d06:	d073      	beq.n	8002df0 <arm_mat_inverse_f32+0x1d4>
 8002d08:	eef5 6a40 	vcmp.f32	s13, #0.0
 8002d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d10:	d06e      	beq.n	8002df0 <arm_mat_inverse_f32+0x1d4>
 8002d12:	4672      	mov	r2, lr
 8002d14:	4663      	mov	r3, ip
 8002d16:	ed93 7a00 	vldr	s14, [r3]
 8002d1a:	3a01      	subs	r2, #1
 8002d1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d20:	ece3 7a01 	vstmia	r3!, {s15}
 8002d24:	d1f7      	bne.n	8002d16 <arm_mat_inverse_f32+0xfa>
 8002d26:	9901      	ldr	r1, [sp, #4]
 8002d28:	464b      	mov	r3, r9
 8002d2a:	ed93 7a00 	vldr	s14, [r3]
 8002d2e:	3901      	subs	r1, #1
 8002d30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d34:	ece3 7a01 	vstmia	r3!, {s15}
 8002d38:	d1f7      	bne.n	8002d2a <arm_mat_inverse_f32+0x10e>
 8002d3a:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8002d3e:	9803      	ldr	r0, [sp, #12]
 8002d40:	42b1      	cmp	r1, r6
 8002d42:	d038      	beq.n	8002db6 <arm_mat_inverse_f32+0x19a>
 8002d44:	eddb 6a00 	vldr	s13, [fp]
 8002d48:	465a      	mov	r2, fp
 8002d4a:	4673      	mov	r3, lr
 8002d4c:	46e2      	mov	sl, ip
 8002d4e:	ecba 7a01 	vldmia	sl!, {s14}
 8002d52:	3b01      	subs	r3, #1
 8002d54:	edd2 7a00 	vldr	s15, [r2]
 8002d58:	ee26 7a87 	vmul.f32	s14, s13, s14
 8002d5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d60:	ece2 7a01 	vstmia	r2!, {s15}
 8002d64:	d1f3      	bne.n	8002d4e <arm_mat_inverse_f32+0x132>
 8002d66:	44bb      	add	fp, r7
 8002d68:	4602      	mov	r2, r0
 8002d6a:	9b01      	ldr	r3, [sp, #4]
 8002d6c:	46ca      	mov	sl, r9
 8002d6e:	ecba 7a01 	vldmia	sl!, {s14}
 8002d72:	3b01      	subs	r3, #1
 8002d74:	edd2 7a00 	vldr	s15, [r2]
 8002d78:	ee26 7a87 	vmul.f32	s14, s13, s14
 8002d7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d80:	ece2 7a01 	vstmia	r2!, {s15}
 8002d84:	d1f3      	bne.n	8002d6e <arm_mat_inverse_f32+0x152>
 8002d86:	4428      	add	r0, r5
 8002d88:	3101      	adds	r1, #1
 8002d8a:	44c3      	add	fp, r8
 8002d8c:	428c      	cmp	r4, r1
 8002d8e:	d1d7      	bne.n	8002d40 <arm_mat_inverse_f32+0x124>
 8002d90:	9b04      	ldr	r3, [sp, #16]
 8002d92:	f1be 0e01 	subs.w	lr, lr, #1
 8002d96:	f106 0601 	add.w	r6, r6, #1
 8002d9a:	f1a7 0704 	sub.w	r7, r7, #4
 8002d9e:	449c      	add	ip, r3
 8002da0:	44a9      	add	r9, r5
 8002da2:	d182      	bne.n	8002caa <arm_mat_inverse_f32+0x8e>
 8002da4:	eef5 6a40 	vcmp.f32	s13, #0.0
 8002da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dac:	d006      	beq.n	8002dbc <arm_mat_inverse_f32+0x1a0>
 8002dae:	2000      	movs	r0, #0
 8002db0:	b007      	add	sp, #28
 8002db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002db6:	44bb      	add	fp, r7
 8002db8:	4428      	add	r0, r5
 8002dba:	e7e5      	b.n	8002d88 <arm_mat_inverse_f32+0x16c>
 8002dbc:	9b05      	ldr	r3, [sp, #20]
 8002dbe:	9a01      	ldr	r2, [sp, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	fb02 f204 	mul.w	r2, r2, r4
 8002dc6:	edd3 7a00 	vldr	s15, [r3]
 8002dca:	4614      	mov	r4, r2
 8002dcc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd4:	d1eb      	bne.n	8002dae <arm_mat_inverse_f32+0x192>
 8002dd6:	3304      	adds	r3, #4
 8002dd8:	e006      	b.n	8002de8 <arm_mat_inverse_f32+0x1cc>
 8002dda:	ecf3 7a01 	vldmia	r3!, {s15}
 8002dde:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002de6:	d1e2      	bne.n	8002dae <arm_mat_inverse_f32+0x192>
 8002de8:	f10e 0e01 	add.w	lr, lr, #1
 8002dec:	4574      	cmp	r4, lr
 8002dee:	d1f4      	bne.n	8002dda <arm_mat_inverse_f32+0x1be>
 8002df0:	f06f 0004 	mvn.w	r0, #4
 8002df4:	b007      	add	sp, #28
 8002df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dfa:	f06f 0002 	mvn.w	r0, #2
 8002dfe:	b007      	add	sp, #28
 8002e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e04:	4655      	mov	r5, sl
 8002e06:	3e01      	subs	r6, #1
 8002e08:	f845 bb04 	str.w	fp, [r5], #4
 8002e0c:	f47f af23 	bne.w	8002c56 <arm_mat_inverse_f32+0x3a>
 8002e10:	e73b      	b.n	8002c8a <arm_mat_inverse_f32+0x6e>
 8002e12:	bf00      	nop
 8002e14:	00000000 	.word	0x00000000

08002e18 <arm_mat_init_f32>:
 8002e18:	8001      	strh	r1, [r0, #0]
 8002e1a:	8042      	strh	r2, [r0, #2]
 8002e1c:	6043      	str	r3, [r0, #4]
 8002e1e:	4770      	bx	lr

08002e20 <arm_cmplx_mult_cmplx_f32>:
 8002e20:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8002e24:	b4f0      	push	{r4, r5, r6, r7}
 8002e26:	d073      	beq.n	8002f10 <arm_cmplx_mult_cmplx_f32+0xf0>
 8002e28:	f100 0620 	add.w	r6, r0, #32
 8002e2c:	f101 0520 	add.w	r5, r1, #32
 8002e30:	f102 0420 	add.w	r4, r2, #32
 8002e34:	4667      	mov	r7, ip
 8002e36:	ed55 5a07 	vldr	s11, [r5, #-28]	@ 0xffffffe4
 8002e3a:	3f01      	subs	r7, #1
 8002e3c:	ed56 7a08 	vldr	s15, [r6, #-32]	@ 0xffffffe0
 8002e40:	f105 0520 	add.w	r5, r5, #32
 8002e44:	ed15 7a10 	vldr	s14, [r5, #-64]	@ 0xffffffc0
 8002e48:	f106 0620 	add.w	r6, r6, #32
 8002e4c:	ed56 6a0f 	vldr	s13, [r6, #-60]	@ 0xffffffc4
 8002e50:	f104 0420 	add.w	r4, r4, #32
 8002e54:	ee27 6a87 	vmul.f32	s12, s15, s14
 8002e58:	ee26 7a87 	vmul.f32	s14, s13, s14
 8002e5c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8002e60:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8002e64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e68:	ee76 6a66 	vsub.f32	s13, s12, s13
 8002e6c:	ed44 7a0f 	vstr	s15, [r4, #-60]	@ 0xffffffc4
 8002e70:	ed44 6a10 	vstr	s13, [r4, #-64]	@ 0xffffffc0
 8002e74:	ed55 5a0d 	vldr	s11, [r5, #-52]	@ 0xffffffcc
 8002e78:	ed56 7a0e 	vldr	s15, [r6, #-56]	@ 0xffffffc8
 8002e7c:	ed15 7a0e 	vldr	s14, [r5, #-56]	@ 0xffffffc8
 8002e80:	ed56 6a0d 	vldr	s13, [r6, #-52]	@ 0xffffffcc
 8002e84:	ee27 6a87 	vmul.f32	s12, s15, s14
 8002e88:	ee26 7a87 	vmul.f32	s14, s13, s14
 8002e8c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8002e90:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8002e94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e98:	ee76 6a66 	vsub.f32	s13, s12, s13
 8002e9c:	ed44 7a0d 	vstr	s15, [r4, #-52]	@ 0xffffffcc
 8002ea0:	ed44 6a0e 	vstr	s13, [r4, #-56]	@ 0xffffffc8
 8002ea4:	ed55 5a0b 	vldr	s11, [r5, #-44]	@ 0xffffffd4
 8002ea8:	ed56 7a0c 	vldr	s15, [r6, #-48]	@ 0xffffffd0
 8002eac:	ed15 7a0c 	vldr	s14, [r5, #-48]	@ 0xffffffd0
 8002eb0:	ed56 6a0b 	vldr	s13, [r6, #-44]	@ 0xffffffd4
 8002eb4:	ee27 6a87 	vmul.f32	s12, s15, s14
 8002eb8:	ee26 7a87 	vmul.f32	s14, s13, s14
 8002ebc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8002ec0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8002ec4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ec8:	ee76 6a66 	vsub.f32	s13, s12, s13
 8002ecc:	ed44 7a0b 	vstr	s15, [r4, #-44]	@ 0xffffffd4
 8002ed0:	ed44 6a0c 	vstr	s13, [r4, #-48]	@ 0xffffffd0
 8002ed4:	ed56 7a0a 	vldr	s15, [r6, #-40]	@ 0xffffffd8
 8002ed8:	ed15 7a0a 	vldr	s14, [r5, #-40]	@ 0xffffffd8
 8002edc:	ed56 6a09 	vldr	s13, [r6, #-36]	@ 0xffffffdc
 8002ee0:	ed55 5a09 	vldr	s11, [r5, #-36]	@ 0xffffffdc
 8002ee4:	ee27 6a87 	vmul.f32	s12, s15, s14
 8002ee8:	ee26 7a87 	vmul.f32	s14, s13, s14
 8002eec:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8002ef0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8002ef4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ef8:	ee76 6a66 	vsub.f32	s13, s12, s13
 8002efc:	ed44 7a09 	vstr	s15, [r4, #-36]	@ 0xffffffdc
 8002f00:	ed44 6a0a 	vstr	s13, [r4, #-40]	@ 0xffffffd8
 8002f04:	d197      	bne.n	8002e36 <arm_cmplx_mult_cmplx_f32+0x16>
 8002f06:	ea4f 144c 	mov.w	r4, ip, lsl #5
 8002f0a:	4420      	add	r0, r4
 8002f0c:	4421      	add	r1, r4
 8002f0e:	4422      	add	r2, r4
 8002f10:	f013 0303 	ands.w	r3, r3, #3
 8002f14:	d04b      	beq.n	8002fae <arm_cmplx_mult_cmplx_f32+0x18e>
 8002f16:	edd0 5a00 	vldr	s11, [r0]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	edd1 7a00 	vldr	s15, [r1]
 8002f20:	edd0 6a01 	vldr	s13, [r0, #4]
 8002f24:	ed91 7a01 	vldr	s14, [r1, #4]
 8002f28:	ee27 6aa5 	vmul.f32	s12, s15, s11
 8002f2c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f30:	ee67 6a26 	vmul.f32	s13, s14, s13
 8002f34:	ee27 7a25 	vmul.f32	s14, s14, s11
 8002f38:	ee76 6a66 	vsub.f32	s13, s12, s13
 8002f3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f40:	edc2 6a00 	vstr	s13, [r2]
 8002f44:	edc2 7a01 	vstr	s15, [r2, #4]
 8002f48:	d031      	beq.n	8002fae <arm_cmplx_mult_cmplx_f32+0x18e>
 8002f4a:	edd0 7a02 	vldr	s15, [r0, #8]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	ed91 7a02 	vldr	s14, [r1, #8]
 8002f54:	edd0 6a03 	vldr	s13, [r0, #12]
 8002f58:	edd1 5a03 	vldr	s11, [r1, #12]
 8002f5c:	ee27 6a87 	vmul.f32	s12, s15, s14
 8002f60:	ee26 7a87 	vmul.f32	s14, s13, s14
 8002f64:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8002f68:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8002f6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f70:	ee76 6a66 	vsub.f32	s13, s12, s13
 8002f74:	edc2 7a03 	vstr	s15, [r2, #12]
 8002f78:	edc2 6a02 	vstr	s13, [r2, #8]
 8002f7c:	d017      	beq.n	8002fae <arm_cmplx_mult_cmplx_f32+0x18e>
 8002f7e:	edd0 7a04 	vldr	s15, [r0, #16]
 8002f82:	ed91 7a04 	vldr	s14, [r1, #16]
 8002f86:	edd0 6a05 	vldr	s13, [r0, #20]
 8002f8a:	edd1 5a05 	vldr	s11, [r1, #20]
 8002f8e:	ee27 6a87 	vmul.f32	s12, s15, s14
 8002f92:	ee26 7a87 	vmul.f32	s14, s13, s14
 8002f96:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8002f9a:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8002f9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fa2:	ee76 6a66 	vsub.f32	s13, s12, s13
 8002fa6:	edc2 7a05 	vstr	s15, [r2, #20]
 8002faa:	edc2 6a04 	vstr	s13, [r2, #16]
 8002fae:	bcf0      	pop	{r4, r5, r6, r7}
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop

08002fb4 <memset>:
 8002fb4:	4402      	add	r2, r0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d100      	bne.n	8002fbe <memset+0xa>
 8002fbc:	4770      	bx	lr
 8002fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8002fc2:	e7f9      	b.n	8002fb8 <memset+0x4>

08002fc4 <__libc_init_array>:
 8002fc4:	b570      	push	{r4, r5, r6, lr}
 8002fc6:	4d0d      	ldr	r5, [pc, #52]	@ (8002ffc <__libc_init_array+0x38>)
 8002fc8:	4c0d      	ldr	r4, [pc, #52]	@ (8003000 <__libc_init_array+0x3c>)
 8002fca:	1b64      	subs	r4, r4, r5
 8002fcc:	10a4      	asrs	r4, r4, #2
 8002fce:	2600      	movs	r6, #0
 8002fd0:	42a6      	cmp	r6, r4
 8002fd2:	d109      	bne.n	8002fe8 <__libc_init_array+0x24>
 8002fd4:	4d0b      	ldr	r5, [pc, #44]	@ (8003004 <__libc_init_array+0x40>)
 8002fd6:	4c0c      	ldr	r4, [pc, #48]	@ (8003008 <__libc_init_array+0x44>)
 8002fd8:	f000 f818 	bl	800300c <_init>
 8002fdc:	1b64      	subs	r4, r4, r5
 8002fde:	10a4      	asrs	r4, r4, #2
 8002fe0:	2600      	movs	r6, #0
 8002fe2:	42a6      	cmp	r6, r4
 8002fe4:	d105      	bne.n	8002ff2 <__libc_init_array+0x2e>
 8002fe6:	bd70      	pop	{r4, r5, r6, pc}
 8002fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fec:	4798      	blx	r3
 8002fee:	3601      	adds	r6, #1
 8002ff0:	e7ee      	b.n	8002fd0 <__libc_init_array+0xc>
 8002ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ff6:	4798      	blx	r3
 8002ff8:	3601      	adds	r6, #1
 8002ffa:	e7f2      	b.n	8002fe2 <__libc_init_array+0x1e>
 8002ffc:	0800307c 	.word	0x0800307c
 8003000:	0800307c 	.word	0x0800307c
 8003004:	0800307c 	.word	0x0800307c
 8003008:	08003080 	.word	0x08003080

0800300c <_init>:
 800300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300e:	bf00      	nop
 8003010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003012:	bc08      	pop	{r3}
 8003014:	469e      	mov	lr, r3
 8003016:	4770      	bx	lr

08003018 <_fini>:
 8003018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800301a:	bf00      	nop
 800301c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800301e:	bc08      	pop	{r3}
 8003020:	469e      	mov	lr, r3
 8003022:	4770      	bx	lr
